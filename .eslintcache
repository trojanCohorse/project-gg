[{"/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/index.js":"1","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/App.js":"2","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/Instructions.js":"3","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/InputReferences.js":"4","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/Navbar.js":"5","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/NewReferencesDisplay.js":"6","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/SeasonDisplay.js":"7","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/LogoutButton.js":"8","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/LoginButton.js":"9","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/episodeReq.js":"10","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/Season.js":"11","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/referencePost.js":"12","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/Episode.js":"13"},{"size":439,"mtime":1610203643672,"results":"14","hashOfConfig":"15"},{"size":1693,"mtime":1610203643665,"results":"16","hashOfConfig":"15"},{"size":1731,"mtime":1610203643667,"results":"17","hashOfConfig":"15"},{"size":6495,"mtime":1610203643667,"results":"18","hashOfConfig":"15"},{"size":2474,"mtime":1610203643667,"results":"19","hashOfConfig":"15"},{"size":4553,"mtime":1610205913428,"results":"20","hashOfConfig":"15"},{"size":2184,"mtime":1610203643669,"results":"21","hashOfConfig":"15"},{"size":202,"mtime":1609692234078,"results":"22","hashOfConfig":"15"},{"size":219,"mtime":1609692234078,"results":"23","hashOfConfig":"15"},{"size":683,"mtime":1610203643670,"results":"24","hashOfConfig":"15"},{"size":901,"mtime":1610203643669,"results":"25","hashOfConfig":"15"},{"size":606,"mtime":1610203643671,"results":"26","hashOfConfig":"15"},{"size":3181,"mtime":1610203643666,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1l7p9qi",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"30"},"/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/index.js",[],["61","62"],"/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/App.js",[],"/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/Instructions.js",[],"/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/InputReferences.js",["63"],"import { useState } from 'react';\nimport axios from 'axios';\nimport Select from 'react-select';\nimport axiosRequest from \"./episodeReq.js\";\n// available seasons for the season number dropdown\nconst seasonOptions = [\n  { value: 1, label: \"1\" },\n  { value: 2, label: \"2\" },\n  { value: 3, label: \"3\" },\n  { value: 4, label: \"4\" },\n  { value: 5, label: \"5\" },\n  { value: 6, label: \"6\" },\n  { value: 7, label: \"7\" },\n]\n\n// this variable will be used to store the array of episodes that correspond to the selected season number\nlet episodeOptions = undefined;\n\n\nconst InputReferences = () => {\n  const [seasonNum, setSeasonNum] = useState(1);\n  const [episodeNum, setEpisodeNum] = useState(1);\n  const [subject, setSubject] = useState('');\n  const [timestamp, setTimestamp] = useState({ minutes: 0, seconds: 0 });\n  const { minutes, seconds } = timestamp;\n  const [quote, setQuote] = useState('');\n  const [speaker, setSpeaker] = useState('');\n  const [speakerContext, setSpeakerContext] = useState('');\n  const [meaning, setMeaning] = useState('');\n  const [submit, setSubmit] = useState(false);\n\n  const findEpisodes = (season) => {\n    // store the formatted episodes in the episodeOptions dropdown menu\n    episodeOptions = axiosRequest(season);\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    // put the rest of the values on the form into an object that will be pushed to the episode array\n      // that object will be pushed to the episodes array\n    const reference = {\n      subject: subject,\n      timestamp: `${minutes}:${seconds < 10 ? \"0\" + seconds: seconds}`,\n      quote: quote,\n      speaker: speaker,\n      context: speakerContext,\n      meaning: meaning,\n      // STRETCH -- screenshot: \"https://some-picture-hosting-website.com/image\"\n    }\n    \n    // use the season number and episode number so that they can be used to check for the specific season and episode\n    axios({\n      method: 'POST',\n      url: 'https://cors-anywhere.herokuapp.com/https://project-gg.herokuapp.com/seasons/add',\n      data: {\n        \"seasonNumber\": seasonNum.value,\n        \"episodeNumber\": episodeNum.value,\n        \"references\": reference\n    }\n    }).then((res) => {\n      alert(\"Reference added to approval list. Thank you!\");\n    }).catch( (err) => {\n      alert(`Sorry, reference submit failed: ${err}`);\n    });\n\n    // set back to default values\n    setSeasonNum(1);\n    setEpisodeNum(1);\n    setSubject('');\n    setTimestamp({ minutes: 0, seconds: 0 });\n    setQuote('');\n    setSpeaker('');\n    setSpeakerContext('');\n    setMeaning('');\n    setSubmit('');\n  }\n\n  return (\n    <section >\n      <h2>Add Your Reference!</h2>\n      <form action=\"submit\" className=\"referencesForm\" onSubmit={handleSubmit}>\n        <label htmlFor=\"seasonNum\">Season Number</label>\n        {/* NOTE even though the Selects are required, they both have an initial value of one, and the form submits even when nothing is chosen. */}\n        <Select\n          id=\"seasonNum\"\n          name=\"seasonNum\"\n          className=\"seasonSelect\"\n          value={seasonNum}\n          options={seasonOptions}\n          onChange={(seasonNum) => {\n            setSeasonNum(seasonNum);\n            findEpisodes(seasonNum.value);\n          }}\n          theme={theme => ({\n            ...theme,\n            borderRadius: 5,\n            colors: {\n              ...theme.colors,\n              primary25: '#dff3e3',\n              primary: '#142c53',\n            }\n          })}\n          required\n        />\n\n        <label htmlFor=\"episodeNum\">Episode Number</label>\n        <Select\n          id=\"episodeNum\"\n          name=\"episodeNum\"\n          className=\"seasonSelect\"\n          value={episodeNum}\n          options={episodeOptions}\n          onChange={(episodeNum) => {\n            setEpisodeNum(episodeNum);\n          }}\n          theme={theme => ({\n            ...theme,\n            borderRadius: 5,\n            colors: {\n              ...theme.colors,\n              primary25: '#dff3e3',\n              primary: '#142c53',\n            }\n          })}\n          required\n        />\n\n        <label htmlFor=\"subject\">Subject</label>\n        <input\n          type=\"text\"\n          id=\"subject\"\n          name=\"subject\"\n          value={subject}\n          onChange={(e) => setSubject(e.target.value)}\n          required\n        />\n\n        <fieldset>\n          {/* TODO use regex to check numbers */}\n          <legend>Time Stamp</legend>\n          <div className=\"minutes\">\n            <label htmlFor=\"minutes\">Minutes</label>\n            <input \n              type=\"number\"\n              id=\"minutes\"\n              name=\"minutes\"\n              value={minutes}\n              onChange={(e) => setTimestamp({...timestamp, minutes: e.target.value })}\n              min=\"0\"\n              max=\"60\"\n              required\n            />\n          </div>\n          <div className=\"seconds\">\n            <label htmlFor=\"seconds\">Seconds</label>\n            <input\n              type=\"number\"\n              id=\"seconds\"\n              name=\"seconds\"\n              value={seconds}\n              onChange={(e) => setTimestamp({ ...timestamp, seconds: e.target.value})}\n              min=\"0\"\n              max=\"59\"\n              required\n            />\n          </div>\n        </fieldset>\n\n        <label htmlFor=\"quote\">Quote</label>\n        <textarea\n          id=\"quote\"\n          name=\"quote\"\n          value={quote}\n          onChange={(e) => setQuote(e.target.value)}\n          required\n          ></textarea>\n\n        <label htmlFor=\"speaker\">Speaker</label>\n        <input\n          type=\"text\"\n          id=\"speaker\"\n          name=\"speaker\"\n          value={speaker}\n          onChange={(e) => setSpeaker(e.target.value)}\n          required\n        />\n\n        <label htmlFor=\"speakerContext\">Context</label>\n        <textarea\n          id=\"speakerContext\"\n          name=\"speakerContext\"\n          value={speakerContext}\n          onChange={(e) => setSpeakerContext(e.target.value)}\n          required\n        ></textarea>\n\n        <label htmlFor=\"meaning\">Meaning</label>\n        <textarea\n          id=\"meaning\"\n          name=\"meaning\"\n          value={meaning}\n          onChange={(e) => setMeaning(e.target.value)}\n          required\n        ></textarea>\n\n        <div className=\"buttons\">\n          {/* Stretch */}\n          <button>Add Another Reference</button>\n          <input type=\"submit\" value=\"Submit\" />\n        </div>\n      </form>\n    </section>\n  );\n}\n\nexport default InputReferences;","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/Navbar.js",["64","65","66"],"import Fragment, { useRef } from \"react\";\nimport { Link } from 'react-router-dom';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport LoginButton from './LoginButton.js';\nimport LogoutButton from './LogoutButton.js'\n\nconst Navbar = () => {\n  const { user, isAuthenticated } = useAuth0();\n  const checkBox = document.getElementById('dropDownMenu');\n  const changeCheckedToFalse = (checkBoxTarget) => {\n    checkBoxTarget.checked = false;\n    return checkBoxTarget;\n  };\n  return (\n    <div>\n      {/* drop down menu that will occur at media query 1135px */}\n      <input type=\"checkbox\" name=\"dropDownMenu\" id=\"dropDownMenu\" />\n      <div className=\"menuToggle\">\n        <label htmlFor=\"dropDownMenu\" aria-label=\"Menu\">\n          {/* hamburger menu */}\n          <span></span>\n          <span></span>\n          <span></span>\n        </label>\n      </div>\n      <nav>\n        <ul className=\"wrapper\">\n          <div className=\"seasons\">\n            <li>\n              <Link to=\"/season/1\" onClick={() => changeCheckedToFalse(checkBox)}>Season 1</Link>\n            </li>\n            <li>\n              <Link to=\"/season/2\" onClick={() => changeCheckedToFalse(checkBox)}>Season 2</Link>\n            </li>\n            <li>\n              <Link to=\"/season/3\" onClick={() => changeCheckedToFalse(checkBox)}>Season 3</Link>\n            </li>\n            <li>\n              <Link to=\"/season/4\" onClick={() => changeCheckedToFalse(checkBox)}>Season 4</Link>\n            </li>\n            <li>\n              <Link to=\"/season/5\" onClick={() => changeCheckedToFalse(checkBox)}>Season 5</Link>\n            </li>\n            <li>\n              <Link to=\"/season/6\" onClick={() => changeCheckedToFalse(checkBox)}>Season 6</Link>\n            </li>\n            <li>\n              <Link to=\"/season/7\" onClick={() => changeCheckedToFalse(checkBox)}>Season 7</Link>\n            </li>\n          </div>\n          <div className=\"navLinks\">\n            <li>\n              <Link to=\"/approve\" onClick={() => changeCheckedToFalse(checkBox)}>Approve Ref</Link>\n            </li>\n            <li>\n              <Link to=\"/input\" onClick={() => changeCheckedToFalse(checkBox)}>New Reference</Link>\n            </li>\n            <li>\n              {isAuthenticated ? <LogoutButton onClick={() => changeCheckedToFalse(checkBox)}/> : <LoginButton onClick={() => changeCheckedToFalse(checkBox)}/>}\n            </li>\n          </div>\n        </ul>\n      </nav>\n    </div>\n  );\n}\n\nexport default Navbar;","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/NewReferencesDisplay.js",[],"/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/SeasonDisplay.js",["67","68"],"import { useState, useEffect, } from 'react';\nimport { Route, Link, useParams, Switch, useRouteMatch } from 'react-router-dom';\nimport axios from 'axios';\nimport Episode from './Episode.js';\nimport Season from './Season.js';\n\nconst SeasonDisplay = () => {\n  const { seasonNum } = useParams();\n  const { url } = useRouteMatch();\n  const [episodeObj, setEpisodeObj] = useState({});\n  const [episodeNum, setEpisodeNum] = useState(1);\n\n  const getEpisodeAxios = async () => {\n    return await axios.get(`https://project-gg.herokuapp.com/seasons/${seasonNum}/episodes/${episodeNum}`)\n      .then(res => {\n        const newEpisodeObj = episodeObj;\n        newEpisodeObj[seasonNum] = { [episodeNum]: res.data[0] };\n        setEpisodeObj(newEpisodeObj);\n        return res.data[0];\n      })\n      .catch(err => alert('Err: ', err));\n  }\n\n  const [seasonsObj, setSeasonsObj] = useState({});\n  const [showSeason, setShowSeason] = useState(seasonNum);\n  if (showSeason !== seasonNum) setShowSeason(seasonNum); // this is to prevent rerenders\n\n  useEffect(() => {\n    if (typeof seasonsObj[showSeason] === 'undefined') {\n      axios({\n        method: 'GET',\n        url: `https://project-gg.herokuapp.com/seasons/${showSeason}`\n      }).then(res => {\n        setSeasonsObj({...seasonsObj, [showSeason]: [res.data[0]] })\n      }).catch(err => alert(err));\n    }\n  }, [showSeason]);\n\n  const changeEpisodeNum = (num) => {\n    setEpisodeNum(num);\n    return num;\n  }\n\n  const getEpisode = async () => {\n    if (!episodeObj[seasonNum]) {\n      const result = await getEpisodeAxios();\n      return result;\n    } else if (!episodeObj[seasonNum][episodeNum]) {\n      const result = await getEpisodeAxios();\n      return result;\n    }\n    return episodeObj[seasonNum][episodeNum];\n  }\n\n  return (\n    <div>\n      <h2>Season {seasonNum}</h2>\n      <Switch>\n        <Route exact path={`${url}`} render={() => (\n          <Season season={seasonsObj[showSeason]} />\n        )} />\n        <Route path={`${url}/episode/:episodeNum`} render={() => (\n          <Episode getEpisode={getEpisode} changeEpisodeNum={changeEpisodeNum} />\n        )} />\n      </Switch>\n    </div>\n  )\n}\n\nexport default SeasonDisplay;\n\n","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/LogoutButton.js",[],"/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/LoginButton.js",[],"/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/episodeReq.js",["69"],"import axios from 'axios';\n\nconst axiosRequest = (seasonNum) => {\n  // formatted array that has returned values from map, and then gets returned itself\n  const readyToExport = [];\n  axios({\n    method: 'GET',\n    url: `https://project-gg.herokuapp.com/seasons/${seasonNum}`,\n    responseType: \"json\"\n  }).then((res) => {\n    const episodesArr =res.data[0].episodes;\n\n    episodesArr.map(episode => {\n      const formattedEpisode = {\n        value: episode.episodeNumber,\n        label: `${episode.episodeNumber} - ${episode.name}`\n      }\n      readyToExport.push(formattedEpisode);\n    });\n  }).catch((err) => alert(err));\n  \n  return readyToExport;\n}\n\nexport default axiosRequest;\n","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/Season.js",["70","71"],"import { Link } from 'react-router-dom';\n\nconst Season = ({ season }) => {\n  return (\n    <section className=\"seasonDisplay\">\n      <ul className=\"episodeList wrapper\">\n        {\n          typeof season !== 'undefined' && (\n            season[0].episodes.map((episode) => {\n              const { episodeNumber, name, overallNumber, references, seasonNumber } = episode;\n              return (\n                <li key={episodeNumber} className=\"episodeCard\">\n                  <div>\n                    <h3>{name}</h3>\n                    <h4> Episode {episodeNumber}</h4>\n                  </div>\n                  {/* STRETCH: Custom GIFs <p>Image Goes Here</p> */}\n                  <Link to={`/season/${seasonNumber}/episode/${episodeNumber}`} >See References</Link>\n                </li>\n              )\n            })\n          )\n        }\n      </ul>\n    </section>\n  )\n}\n\nexport default Season;","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/referencePost.js",[],"/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/Episode.js",["72","73","74","75","76"],"// import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n// import axios from 'axios';\n\nconst Episode = (props) => { \n  \n  const { episodeNum } = useParams();\n  const [result, setResult] = useState(0);\n  const [episodeResult, setEpisodeResult] = useState(0);\n  const [image, setImage] = useState([]);\n  const [sortedEpisodes, setSortedEpisodes] = useState([]);\n\n  useEffect(() => {\n    props.changeEpisodeNum(episodeNum);\n    setResult(5);\n  }, []);\n\n  useEffect(() => {\n    if (result !== 0) {\n      props.getEpisode().then((res) => {\n        setEpisodeResult(res)\n      });\n    }\n  }, [result]);\n\n  useEffect(() => {\n    const seasonNum = episodeResult.seasonNumber; \n\n    if (episodeResult) {\n      axios({\n        method: 'GET',\n        url: `https://api.themoviedb.org/3/tv/4586/season/${seasonNum}/episode/${episodeNum}?api_key=cd7b67374269e15777a55aee45332dab`\n      }).then(res => {\n        const newImage = 'https://image.tmdb.org/t/p/original' + res.data.still_path;\n        setImage(newImage);\n      }).catch(err => alert('err: ', err));\n    }\n  }, [episodeResult])\n\n  useEffect(() => {\n    if (episodeResult !== 0) setSortedEpisodes();\n  }, [episodeResult])\n\n  return (\n    <section className=\"episodeInfo\">\n      {episodeResult && (\n        <div className=\"wrapper\">\n          <h3>{episodeResult.name}</h3>\n          <img src={image} alt=\"image of show\" />\n          {\n            episodeResult.references.length > 0 && (\n              <section className=\"references episodeContainer\">\n                {\n                  episodeResult.references.map(reference => {\n                    return (\n                      <article key={reference.id} className=\"episodeRef\">\n                        <div className=\"entryLine\">\n                          <h5>Subject:</h5>\n                          <p className=\"scroll\">{reference.subject}</p>\n                        </div>\n                        <div className=\"entryLine\">\n                          <h5>Time Stamp:</h5>\n                          <p>{reference.timestamp}</p>\n                        </div>\n                        <div className=\"entryLine\">\n                          <h5>Quote:</h5>\n                          <p className=\"scroll\">{reference.quote}</p>\n                        </div>\n                        <div className=\"entryLine\">\n                          <h5>Speaker:</h5>\n                          <p className=\"scroll\">{reference.speaker}</p>\n                        </div>\n                        <div className=\"entryLine\">\n                          <h5>Context:</h5>\n                          <p className=\"scroll\">{reference.context}</p>\n                        </div>\n                        <div className=\"entryLine\">\n                          <h5>Meaning:</h5>\n                          <p className=\"scroll\">{reference.meaning}</p>\n                        </div>\n                      </article>\n                    )\n                  })\n                }\n              </section>\n            )\n          }\n        </div>\n      )}\n    </section>\n  )\n}\n\nexport default Episode;",{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":30,"column":10,"nodeType":"83","messageId":"84","endLine":30,"endColumn":16},{"ruleId":"81","severity":1,"message":"85","line":1,"column":8,"nodeType":"83","messageId":"84","endLine":1,"endColumn":16},{"ruleId":"81","severity":1,"message":"86","line":1,"column":20,"nodeType":"83","messageId":"84","endLine":1,"endColumn":26},{"ruleId":"81","severity":1,"message":"87","line":8,"column":11,"nodeType":"83","messageId":"84","endLine":8,"endColumn":15},{"ruleId":"81","severity":1,"message":"88","line":2,"column":17,"nodeType":"83","messageId":"84","endLine":2,"endColumn":21},{"ruleId":"89","severity":1,"message":"90","line":37,"column":6,"nodeType":"91","endLine":37,"endColumn":18,"suggestions":"92"},{"ruleId":"93","severity":1,"message":"94","line":13,"column":29,"nodeType":"95","messageId":"96","endLine":13,"endColumn":31},{"ruleId":"81","severity":1,"message":"97","line":10,"column":44,"nodeType":"83","messageId":"84","endLine":10,"endColumn":57},{"ruleId":"81","severity":1,"message":"98","line":10,"column":59,"nodeType":"83","messageId":"84","endLine":10,"endColumn":69},{"ruleId":"81","severity":1,"message":"99","line":13,"column":10,"nodeType":"83","messageId":"84","endLine":13,"endColumn":24},{"ruleId":"89","severity":1,"message":"100","line":18,"column":6,"nodeType":"91","endLine":18,"endColumn":8,"suggestions":"101"},{"ruleId":"89","severity":1,"message":"102","line":26,"column":6,"nodeType":"91","endLine":26,"endColumn":14,"suggestions":"103"},{"ruleId":"89","severity":1,"message":"104","line":40,"column":6,"nodeType":"91","endLine":40,"endColumn":21,"suggestions":"105"},{"ruleId":"106","severity":1,"message":"107","line":51,"column":11,"nodeType":"108","endLine":51,"endColumn":50},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"no-unused-vars","'submit' is assigned a value but never used.","Identifier","unusedVar","'Fragment' is defined but never used.","'useRef' is defined but never used.","'user' is assigned a value but never used.","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'seasonsObj'. Either include it or remove the dependency array. You can also do a functional update 'setSeasonsObj(s => ...)' if you only need 'seasonsObj' in the 'setSeasonsObj' call.","ArrayExpression",["111"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'overallNumber' is assigned a value but never used.","'references' is assigned a value but never used.","'sortedEpisodes' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'episodeNum' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["112"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["113"],"React Hook useEffect has a missing dependency: 'episodeNum'. Either include it or remove the dependency array.",["114"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},"Update the dependencies array to be: [seasonsObj, showSeason]",{"range":"123","text":"124"},"Update the dependencies array to be: [episodeNum, props]",{"range":"125","text":"126"},"Update the dependencies array to be: [props, result]",{"range":"127","text":"128"},"Update the dependencies array to be: [episodeNum, episodeResult]",{"range":"129","text":"130"},[1354,1366],"[seasonsObj, showSeason]",[554,556],"[episodeNum, props]",[696,704],"[props, result]",[1169,1184],"[episodeNum, episodeResult]"]