[{"/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/index.js":"1","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/reportWebVitals.js":"2","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/App.js":"3","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/InputReferences.js":"4","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/Navbar.js":"5","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/SeasonDisplay.js":"6","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/episodeRequest.js":"7","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/Episode.js":"8"},{"size":506,"mtime":1609362364447,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1609273949542,"results":"11","hashOfConfig":"10"},{"size":955,"mtime":1609617865348,"results":"12","hashOfConfig":"10"},{"size":6358,"mtime":1609610334549,"results":"13","hashOfConfig":"10"},{"size":999,"mtime":1609617172150,"results":"14","hashOfConfig":"10"},{"size":2262,"mtime":1609617822481,"results":"15","hashOfConfig":"10"},{"size":752,"mtime":1609610406670,"results":"16","hashOfConfig":"10"},{"size":242,"mtime":1609617998605,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1l7p9qi",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/index.js",[],["37","38"],"/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/reportWebVitals.js",[],"/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/App.js",["39","40","41","42"],"/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/InputReferences.js",["43"],"import { useState } from 'react';\nimport axios from 'axios';\nimport Select from 'react-select';\nimport axiosRequest from \"./episodeRequest.js\";\n\n// available seasons for the season number dropdown\nconst seasonOptions = [\n  { value: 1, label: \"1\" },\n  { value: 2, label: \"2\" }, \n  { value: 3, label: \"3\" },\n  { value: 4, label: \"4\" },\n  { value: 5, label: \"5\" },\n  { value: 6, label: \"6\" },\n  { value: 7, label: \"7\" },\n]\n\n// this variable will be used to store the array of episodes that correspond to the selected season number\nlet episodeOptions = undefined;\n\n\nconst InputReferences = () => {\n  const [seasonNum, setSeasonNum] = useState(1);\n  const [episodeNum, setEpisodeNum] = useState(1);\n  const [subject, setSubject] = useState('');\n  const [timestamp, setTimestamp] = useState({ minutes: 0, seconds: 0 });\n  // destructure timestamp\n  const { minutes, seconds } = timestamp;\n  const [quote, setQuote] = useState('');\n  const [speaker, setSpeaker] = useState('');\n  const [speakerContext, setSpeakerContext] = useState('');\n  const [meaning, setMeaning] = useState('');\n  const [submit, setSubmit] = useState(false);\n\n  const findEpisodes = (season) => {\n    // store the formatted episodes in the episodeOptions dropdown menu\n    episodeOptions = axiosRequest(season);\n    console.log(\"Did this work?\", episodeOptions);\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    // put the rest of the values on the form into an object that will be pushed to the episode array\n      // that object will be pushed to the episodes array\n    const reference = {\n      // id: 1, --> Array.length ; added in backend\n      subject: subject,\n      timestamp: `${minutes}:${seconds < 10 ? \"0\" + seconds: seconds}`,\n      quote: quote,\n      speaker: speaker,\n      context: speakerContext,\n      meaning: meaning,\n      // screenshot: \"https://some-picture-hosting-website.com/image\"\n    }\n    console.log(reference);\n    \n    // use the season number and episode number so that they can be used to check for the specific season and episode\n    axios({\n      method: 'POST',\n      url: 'https://project-gg.herokuapp.com/seasons/add',\n      data: {\n        \"seasonNumber\": seasonNum.value,\n        \"episodeNumber\": episodeNum.value,\n        \"references\": reference\n    }\n    }).then((res) => {\n      console.log('maloned', res);\n    }, (err) => console.log(err));\n\n    // set back to default values\n    setSeasonNum(1);\n    setEpisodeNum(1);\n    setSubject('');\n    setTimestamp({ minutes: 0, seconds: 0 });\n    setQuote('');\n    setSpeaker('');\n    setSpeakerContext('');\n    setMeaning('');\n    setSubmit('');\n\n    // TODO better UI; only inform the user that the reference was submitted if the post request was successful\n    alert(\"Reference Submitted!\");\n  }\n\n  return (\n    <section className=\"referencesForm\">\n      <h2>Add Your Reference!</h2>\n      <form action=\"submit\" onSubmit={handleSubmit}>\n        <label htmlFor=\"seasonNum\">Season Number</label>\n        {/* NOTE even though the Selects are required, they both have an initial value of one, and the form submits even when nothing is chosen. */}\n        <Select\n          id=\"seasonNum\"\n          name=\"seasonNum\"\n          className=\"seasonSelect\"\n          value={seasonNum}\n          options={seasonOptions}\n          onChange={(seasonNum) => {\n            setSeasonNum(seasonNum);\n            findEpisodes(seasonNum.value);\n          }}\n          required\n        />\n\n        <label htmlFor=\"episodeNum\">Episode Number</label>\n        <Select\n          id=\"episodeNum\"\n          name=\"episodeNum\"\n          className=\"seasonSelect\"\n          value={episodeNum}\n          options={episodeOptions}\n          onChange={(episodeNum) => {\n            setEpisodeNum(episodeNum);\n            findEpisodes(episodeNum.value); // TODO check to see if this is needed once the 503 error is gone\n          }}\n          required\n        />\n\n        <label htmlFor=\"subject\">Subject</label>\n        <input\n          type=\"text\"\n          id=\"subject\"\n          name=\"subject\"\n          value={subject}\n          onChange={(e) => setSubject(e.target.value)}\n          required\n        />\n\n        <fieldset>\n          <legend>Time Stamp</legend>\n          <div className=\"minutes\">\n            <label htmlFor=\"minutes\">Minutes</label>\n            <input \n              type=\"number\"\n              id=\"minutes\"\n              name=\"minutes\"\n              value={minutes}\n              onChange={(e) => setTimestamp({...timestamp, minutes: e.target.value })}\n              min=\"0\"\n              max=\"60\"\n              required\n            />\n          </div>\n          <div className=\"seconds\">\n            <label htmlFor=\"seconds\">Seconds</label>\n            <input\n              type=\"number\"\n              id=\"seconds\"\n              name=\"seconds\"\n              value={seconds}\n              onChange={(e) => setTimestamp({ ...timestamp, seconds: e.target.value})}\n              min=\"0\"\n              max=\"59\"\n              required\n            />\n          </div>\n        </fieldset>\n\n        <label htmlFor=\"quote\">Quote</label>\n        <textarea\n          id=\"quote\"\n          name=\"quote\"\n          value={quote}\n          onChange={(e) => setQuote(e.target.value)}\n          required\n          ></textarea>\n\n        <label htmlFor=\"speaker\">Speaker</label>\n        <input\n          type=\"text\"\n          id=\"speaker\"\n          name=\"speaker\"\n          value={speaker}\n          onChange={(e) => setSpeaker(e.target.value)}\n          required\n        />\n\n        <label htmlFor=\"speakerContext\">Context</label>\n        <textarea\n          id=\"speakerContext\"\n          name=\"speakerContext\"\n          value={speakerContext}\n          onChange={(e) => setSpeakerContext(e.target.value)}\n          required\n        ></textarea>\n\n        <label htmlFor=\"meaning\">Meaning</label>\n        <textarea\n          id=\"meaning\"\n          name=\"meaning\"\n          value={meaning}\n          onChange={(e) => setMeaning(e.target.value)}\n          required\n        ></textarea>\n\n        {/* STRETCH */}\n        <button>Add Another Reference</button>\n        {/* REVIEW the form will still submit even if the Selects are empty; disable submit button until form is complete instead? */}\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    </section>\n  );\n}\n\nexport default InputReferences;","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/Navbar.js",["44"],"/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/SeasonDisplay.js",["45","46","47","48","49","50"],"/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/episodeRequest.js",["51"],"import axios from 'axios';\n\nconst axiosRequest = (seasonNum) => {\n  // formatted array that has returned values from map, and then gets returned itself\n  const readyToExport = [];\n  // https://project-gg.herokuapp.com/seasons/${seasonNum}\n  axios({\n    method: 'GET',\n    url: `https://project-gg.herokuapp.com/seasons/${seasonNum}`,\n    responseType: \"json\"\n  }).then((res) => {\n    const episodesArr =res.data[0].episodes;\n    \n\n    episodesArr.map(episode => {\n      const formattedEpisode = {\n        value: episode.episodeNumber,\n        label: `${episode.episodeNumber} - ${episode.name}`\n      }\n      readyToExport.push(formattedEpisode);\n    });\n  }).catch((err) => console.log(err));\n  \n  return readyToExport;\n}\n\nexport default axiosRequest;","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/Episode.js",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":1,"column":17,"nodeType":"58","messageId":"59","endLine":1,"endColumn":25},{"ruleId":"56","severity":1,"message":"60","line":2,"column":42,"nodeType":"58","messageId":"59","endLine":2,"endColumn":46},{"ruleId":"56","severity":1,"message":"61","line":2,"column":48,"nodeType":"58","messageId":"59","endLine":2,"endColumn":57},{"ruleId":"56","severity":1,"message":"62","line":8,"column":8,"nodeType":"58","messageId":"59","endLine":8,"endColumn":13},{"ruleId":"56","severity":1,"message":"63","line":32,"column":10,"nodeType":"58","messageId":"59","endLine":32,"endColumn":16},{"ruleId":"56","severity":1,"message":"64","line":1,"column":10,"nodeType":"58","messageId":"59","endLine":1,"endColumn":15},{"ruleId":"56","severity":1,"message":"65","line":8,"column":10,"nodeType":"58","messageId":"59","endLine":8,"endColumn":20},{"ruleId":"56","severity":1,"message":"66","line":8,"column":22,"nodeType":"58","messageId":"59","endLine":8,"endColumn":35},{"ruleId":"67","severity":1,"message":"68","line":22,"column":6,"nodeType":"69","endLine":22,"endColumn":8,"suggestions":"70"},{"ruleId":"56","severity":1,"message":"71","line":53,"column":44,"nodeType":"58","messageId":"59","endLine":53,"endColumn":57},{"ruleId":"56","severity":1,"message":"72","line":53,"column":59,"nodeType":"58","messageId":"59","endLine":53,"endColumn":69},{"ruleId":"56","severity":1,"message":"73","line":53,"column":71,"nodeType":"58","messageId":"59","endLine":53,"endColumn":83},{"ruleId":"74","severity":1,"message":"75","line":15,"column":29,"nodeType":"76","messageId":"77","endLine":15,"endColumn":31},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'useParams' is defined but never used.","'axios' is defined but never used.","'submit' is assigned a value but never used.","'Route' is defined but never used.","'showSeason' is assigned a value but never used.","'setShowSeason' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'seasonNum' and 'seasonsObj'. Either include them or remove the dependency array.","ArrayExpression",["80"],"'overallNumber' is assigned a value but never used.","'references' is assigned a value but never used.","'seasonNumber' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation",{"desc":"81","fix":"82"},"Update the dependencies array to be: [seasonNum, seasonsObj]",{"range":"83","text":"84"},[764,766],"[seasonNum, seasonsObj]"]