<<<<<<< HEAD
[{"C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\index.js":"1","C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\reportWebVitals.js":"2","C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\App.js":"3","C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\components\\Navbar.js":"4","C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\components\\InputReferences.js":"5","C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\components\\Episode.js":"6","C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\components\\NewReferencesDisplay.js":"7","C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\components\\SeasonDisplay.js":"8","C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\components\\LoginButton.js":"9","C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\components\\episodeReq.js":"10","C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\components\\LogoutButton.js":"11","C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\components\\referencePost.js":"12"},{"size":523,"mtime":1609438200455,"results":"13","hashOfConfig":"14"},{"size":375,"mtime":1609438200459,"results":"15","hashOfConfig":"14"},{"size":1682,"mtime":1609686432543,"results":"16","hashOfConfig":"14"},{"size":1366,"mtime":1609629470869,"results":"17","hashOfConfig":"14"},{"size":7066,"mtime":1609686432548,"results":"18","hashOfConfig":"14"},{"size":244,"mtime":1609622827993,"results":"19","hashOfConfig":"14"},{"size":2364,"mtime":1609686580973,"results":"20","hashOfConfig":"14"},{"size":1844,"mtime":1609686432550,"results":"21","hashOfConfig":"14"},{"size":227,"mtime":1609629470865,"results":"22","hashOfConfig":"14"},{"size":778,"mtime":1609622828047,"results":"23","hashOfConfig":"14"},{"size":210,"mtime":1609629470867,"results":"24","hashOfConfig":"14"},{"size":662,"mtime":1609686432552,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"4ap19o",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\index.js",[],["56","57"],"C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\reportWebVitals.js",[],"C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\App.js",["58"],"import React from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport { Auth0Provider } from \"@auth0/auth0-react\";\r\nimport './sass/App.scss';\r\nimport InputReferences from './components/InputReferences.js';\r\nimport Navbar from \"./components/Navbar.js\";\r\nimport SeasonDisplay from \"./components/SeasonDisplay\";\r\nimport Episode from \"./components/Episode\";\r\nimport NewReferencesDisplay from \"./components/NewReferencesDisplay\"\r\n\r\nconst App = () => {\r\n  return (\r\n    <Auth0Provider\r\n    domain=\"codedkhan.us.auth0.com\"\r\n    clientId=\"1fAqEsZEmLK7Lfrh0PP01H8YbIPCs1q0\"\r\n    redirectUri={window.location.origin}>\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n      <div className=\"App\">\r\n        <header>\r\n          <div className=\"wrapper\">\r\n            <Route \r\n              path=\"/\" \r\n              component={Navbar} \r\n              />\r\n            {/* REVIEW title should reflect the purpose of our app (copyright!) */}\r\n            {/* TODO coffee beside h1 */}\r\n            <h1>Gilmore girls API</h1>\r\n            <img src=\"./coffee.png\" alt=\"Coffee Cup\"/>\r\n            <Route \r\n              path=\"/approve\"\r\n              component={NewReferencesDisplay}\r\n            />\r\n          </div>\r\n        </header>\r\n        <main>\r\n          <Route \r\n            exact path=\"/season/:seasonNum\" \r\n            component={SeasonDisplay} \r\n          />\r\n          <Route\r\n            exact path=\"/season/:seasonNum/episode/:episodeNum\"\r\n            component={Episode}\r\n          />\r\n          <Route path=\"/input\" component={InputReferences} />\r\n        </main>\r\n      </div>\r\n    </Router>\r\n  </Auth0Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\components\\Navbar.js",[],"C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\components\\InputReferences.js",["59"],"import { useState } from 'react';\r\nimport axios from 'axios';\r\nimport Select from 'react-select';\r\nimport axiosRequest from \"./episodeReq.js\";\r\n// available seasons for the season number dropdown\r\nconst seasonOptions = [\r\n  { value: 1, label: \"1\" },\r\n  { value: 2, label: \"2\" },\r\n  { value: 3, label: \"3\" },\r\n  { value: 4, label: \"4\" },\r\n  { value: 5, label: \"5\" },\r\n  { value: 6, label: \"6\" },\r\n  { value: 7, label: \"7\" },\r\n]\r\n\r\n// this variable will be used to store the array of episodes that correspond to the selected season number\r\nlet episodeOptions = undefined;\r\n\r\n\r\nconst InputReferences = () => {\r\n  const [seasonNum, setSeasonNum] = useState(1);\r\n  const [episodeNum, setEpisodeNum] = useState(1);\r\n  const [subject, setSubject] = useState('');\r\n  const [timestamp, setTimestamp] = useState({ minutes: 0, seconds: 0 });\r\n  const { minutes, seconds } = timestamp;\r\n  const [quote, setQuote] = useState('');\r\n  const [speaker, setSpeaker] = useState('');\r\n  const [speakerContext, setSpeakerContext] = useState('');\r\n  const [meaning, setMeaning] = useState('');\r\n  const [submit, setSubmit] = useState(false);\r\n\r\n  const findEpisodes = (season) => {\r\n    // store the formatted episodes in the episodeOptions dropdown menu\r\n    episodeOptions = axiosRequest(season);\r\n    console.log(\"Did this work?\", episodeOptions);\r\n  }\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    // put the rest of the values on the form into an object that will be pushed to the episode array\r\n      // that object will be pushed to the episodes array\r\n    const reference = {\r\n      // id: 1, --> Array.length ; added in backend\r\n      subject: subject,\r\n      timestamp: `${minutes}:${seconds < 10 ? \"0\" + seconds: seconds}`,\r\n      quote: quote,\r\n      speaker: speaker,\r\n      context: speakerContext,\r\n      meaning: meaning,\r\n      // screenshot: \"https://some-picture-hosting-website.com/image\"\r\n    }\r\n    console.log(reference);\r\n    \r\n    // use the season number and episode number so that they can be used to check for the specific season and episode\r\n    axios({\r\n      method: 'POST',\r\n      url: 'https://project-gg.herokuapp.com/seasons/add',\r\n      data: {\r\n        \"seasonNumber\": seasonNum.value,\r\n        \"episodeNumber\": episodeNum.value,\r\n        \"references\": reference\r\n    }\r\n    }).then((res) => {\r\n      console.log('maloned', res);\r\n    }, (err) => console.log(err));\r\n\r\n    // set back to default values\r\n    setSeasonNum(1);\r\n    setEpisodeNum(1);\r\n    setSubject('');\r\n    setTimestamp({ minutes: 0, seconds: 0 });\r\n    setQuote('');\r\n    setSpeaker('');\r\n    setSpeakerContext('');\r\n    setMeaning('');\r\n    setSubmit('');\r\n\r\n    // TODO better UI; only inform the user that the reference was submitted if the post request was successful\r\n    alert(\"Reference Submitted!\");\r\n  }\r\n\r\n  return (\r\n    <section >\r\n      <h2>Add Your Reference!</h2>\r\n      <form action=\"submit\" className=\"referencesForm\" onSubmit={handleSubmit}>\r\n        <label htmlFor=\"seasonNum\">Season Number</label>\r\n        {/* NOTE even though the Selects are required, they both have an initial value of one, and the form submits even when nothing is chosen. */}\r\n        <Select\r\n          id=\"seasonNum\"\r\n          name=\"seasonNum\"\r\n          className=\"seasonSelect\"\r\n          value={seasonNum}\r\n          options={seasonOptions}\r\n          onChange={(seasonNum) => {\r\n            setSeasonNum(seasonNum);\r\n            findEpisodes(seasonNum.value);\r\n          }}\r\n          theme={theme => ({\r\n            ...theme,\r\n            borderRadius: 5,\r\n            colors: {\r\n              ...theme.colors,\r\n              primary25: '#d479ff',\r\n              primary: '#3a1879',\r\n            }\r\n          })}\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"episodeNum\">Episode Number</label>\r\n        <Select\r\n          id=\"episodeNum\"\r\n          name=\"episodeNum\"\r\n          className=\"seasonSelect\"\r\n          value={episodeNum}\r\n          options={episodeOptions}\r\n          onChange={(episodeNum) => {\r\n            setEpisodeNum(episodeNum);\r\n            findEpisodes(episodeNum.value); // TODO check to see if this is needed once the 503 error is gone\r\n          }}\r\n          theme={theme => ({\r\n            ...theme,\r\n            borderRadius: 5,\r\n            colors: {\r\n              ...theme.colors,\r\n              primary25: '#d479ff',\r\n              primary: '#3a1879',\r\n            }\r\n          })}\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"subject\">Subject</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"subject\"\r\n          name=\"subject\"\r\n          value={subject}\r\n          onChange={(e) => setSubject(e.target.value)}\r\n          required\r\n        />\r\n\r\n        <fieldset>\r\n          <legend>Time Stamp</legend>\r\n          <div className=\"minutes\">\r\n            <label htmlFor=\"minutes\">Minutes</label>\r\n            <input \r\n              type=\"number\"\r\n              id=\"minutes\"\r\n              name=\"minutes\"\r\n              value={minutes}\r\n              onChange={(e) => setTimestamp({...timestamp, minutes: e.target.value })}\r\n              min=\"0\"\r\n              max=\"60\"\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"seconds\">\r\n            <label htmlFor=\"seconds\">Seconds</label>\r\n            <input\r\n              type=\"number\"\r\n              id=\"seconds\"\r\n              name=\"seconds\"\r\n              value={seconds}\r\n              onChange={(e) => setTimestamp({ ...timestamp, seconds: e.target.value})}\r\n              min=\"0\"\r\n              max=\"59\"\r\n              required\r\n            />\r\n          </div>\r\n        </fieldset>\r\n\r\n        <label htmlFor=\"quote\">Quote</label>\r\n        <textarea\r\n          id=\"quote\"\r\n          name=\"quote\"\r\n          value={quote}\r\n          onChange={(e) => setQuote(e.target.value)}\r\n          required\r\n          ></textarea>\r\n\r\n        <label htmlFor=\"speaker\">Speaker</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"speaker\"\r\n          name=\"speaker\"\r\n          value={speaker}\r\n          onChange={(e) => setSpeaker(e.target.value)}\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"speakerContext\">Context</label>\r\n        <textarea\r\n          id=\"speakerContext\"\r\n          name=\"speakerContext\"\r\n          value={speakerContext}\r\n          onChange={(e) => setSpeakerContext(e.target.value)}\r\n          required\r\n        ></textarea>\r\n\r\n        <label htmlFor=\"meaning\">Meaning</label>\r\n        <textarea\r\n          id=\"meaning\"\r\n          name=\"meaning\"\r\n          value={meaning}\r\n          onChange={(e) => setMeaning(e.target.value)}\r\n          required\r\n        ></textarea>\r\n\r\n        <div className=\"buttons\">\r\n          {/* STRETCH */}\r\n          <button>Add Another Reference</button>\r\n          {/* REVIEW the form will still submit even if the Selects are empty; disable submit button until form is complete instead? */}\r\n          <input type=\"submit\" value=\"Submit\" />\r\n        </div>\r\n      </form>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default InputReferences;","C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\components\\Episode.js",[],"C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\components\\NewReferencesDisplay.js",["60"],"import { useState, useEffect, } from 'react';\r\nimport axios from 'axios';\r\nimport postRefToDb from './referencePost.js';\r\n\r\nconst NewReferencesDisplay = ()=> {\r\n  const [ approvalData, setApprovalData ] = useState([]);\r\n  \r\n  useEffect(() => {\r\n    axios({\r\n      method: 'GET',\r\n      url: `https://project-gg.herokuapp.com/seasons/approve`\r\n    }).then(res => {\r\n      console.log('Stuff to approve', res.data);\r\n      setApprovalData(res.data);\r\n      console.log(approvalData);\r\n    }).catch(err => console.log(err));\r\n  }, [])\r\n  console.log('Initial log');\r\n\r\n  return(\r\n    <div>\r\n      {\r\n        approvalData.map((item, episodeIndex) => {\r\n          return (\r\n            <article key={episodeIndex}>\r\n              <h3>Season: {item.seasonNumber}</h3>\r\n              <h3>Season: {item.episodeNumber}</h3>\r\n              {\r\n                item.references.map((reference, i) => {\r\n                  return (\r\n                    <article key={i}>\r\n                      <p>Subject: {reference.subject}</p>\r\n                      <p>Timestamp: {reference.timestamp}</p>\r\n                      <p>Quote: {reference.quote}</p>\r\n                      <p>Speaker: {reference.speaker}</p>\r\n                      <p>Context: {reference.context}</p>\r\n                      <p>Meaning: {reference.meaning}</p>\r\n                      <button onClick={ () => postRefToDb(reference.subject, reference.timestamp, reference.quote, reference.speaker, reference.context, reference.meaning, item.seasonNumber, item.episodeNumber, i) }>Approve</button>\r\n                    </article>\r\n                  )\r\n                })\r\n              }\r\n            </article>\r\n          )\r\n        })\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n\r\n      {/* {approvalData.map((item, index) => {\r\n        return (\r\n          <article key={index}>\r\n            <p>Index: {index}</p>\r\n            <p>Subject: {item.subject}</p>\r\n            <p>Timestamp: {item.timestamp}</p>\r\n            <p>Quote: {item.quote}</p>\r\n            <p>Speaker: {item.speaker}</p>\r\n            <p>Context: {item.context}</p>\r\n            <p>Meaning: {item.meaning}</p>\r\n            <button onClick={ () => postRefToDb(item.subject, item.timestamp, item.quote, item.speaker, item.context, item.meaning) }>Approve</button>\r\n          </article>\r\n        )\r\n      })} */}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default NewReferencesDisplay;","C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\components\\SeasonDisplay.js",["61","62","63","64"],"import { useState, useEffect, } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nconst SeasonDisplay = () => {\r\n  const { seasonNum } = useParams();\r\n\r\n  const [seasonsObj, setSeasonsObj] = useState({});\r\n  const [showSeason, setShowSeason] = useState(seasonNum);\r\n  // line below is to prevent rerenders\r\n  if (showSeason !== seasonNum) setShowSeason(seasonNum);\r\n\r\n  // when the page gets loaded, initialize first season\r\n  // https://project-gg.herokuapp.com/seasons/1\r\n  // http://127.0.0.1:5000/seasons/1\r\n  useEffect(() => {\r\n    if (typeof seasonsObj[showSeason] === 'undefined') {\r\n      axios({\r\n        method: 'GET',\r\n        url: `https://project-gg.herokuapp.com/seasons/${showSeason}`\r\n      }).then(res => {\r\n        console.log('gotted');\r\n        setSeasonsObj({...seasonsObj, [showSeason]: [res.data[0]] })\r\n      }).catch(err => console.log(err));\r\n    }\r\n  }, [showSeason]);\r\n\r\n\r\n  return (  \r\n    <section className=\"seasons\">\r\n      <h2>Season {showSeason}</h2>\r\n      <ul className=\"episodeList wrapper\">\r\n        {\r\n          typeof seasonsObj[showSeason] !== 'undefined' && (\r\n            seasonsObj[showSeason][0].episodes.map((episode) => {\r\n              const { episodeNumber, name, overallNumber, references, seasonNumber } = episode;\r\n              return (\r\n                <li key={episodeNumber} className=\"episodeCard\">\r\n                  <div>\r\n                    <h3>{name}</h3>\r\n                    <h4> Episode {episodeNumber}</h4>\r\n                  </div>\r\n\r\n                  <p>Image Goes Here</p>\r\n                  <Link to={`/season/${showSeason}/episode/${episodeNumber}`} >See References</Link>\r\n                </li>\r\n              )\r\n            })\r\n          )\r\n        }\r\n      </ul>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default SeasonDisplay;\r\n","C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\components\\LoginButton.js",[],"C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\components\\episodeReq.js",["65"],"import axios from 'axios';\r\n\r\nconst axiosRequest = (seasonNum) => {\r\n  // formatted array that has returned values from map, and then gets returned itself\r\n  const readyToExport = [];\r\n  // https://project-gg.herokuapp.com/seasons/${seasonNum}\r\n  axios({\r\n    method: 'GET',\r\n    url: `https://project-gg.herokuapp.com/seasons/${seasonNum}`,\r\n    responseType: \"json\"\r\n  }).then((res) => {\r\n    const episodesArr =res.data[0].episodes;\r\n    \r\n\r\n    episodesArr.map(episode => {\r\n      const formattedEpisode = {\r\n        value: episode.episodeNumber,\r\n        label: `${episode.episodeNumber} - ${episode.name}`\r\n      }\r\n      readyToExport.push(formattedEpisode);\r\n    });\r\n  }).catch((err) => console.log(err));\r\n  \r\n  return readyToExport;\r\n}\r\n\r\nexport default axiosRequest;","C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\components\\LogoutButton.js",[],"C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\components\\referencePost.js",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":2,"column":42,"nodeType":"72","messageId":"73","endLine":2,"endColumn":46},{"ruleId":"70","severity":1,"message":"74","line":30,"column":10,"nodeType":"72","messageId":"73","endLine":30,"endColumn":16},{"ruleId":"75","severity":1,"message":"76","line":17,"column":6,"nodeType":"77","endLine":17,"endColumn":8,"suggestions":"78"},{"ruleId":"75","severity":1,"message":"79","line":26,"column":6,"nodeType":"77","endLine":26,"endColumn":18,"suggestions":"80"},{"ruleId":"70","severity":1,"message":"81","line":36,"column":44,"nodeType":"72","messageId":"73","endLine":36,"endColumn":57},{"ruleId":"70","severity":1,"message":"82","line":36,"column":59,"nodeType":"72","messageId":"73","endLine":36,"endColumn":69},{"ruleId":"70","severity":1,"message":"83","line":36,"column":71,"nodeType":"72","messageId":"73","endLine":36,"endColumn":83},{"ruleId":"84","severity":1,"message":"85","line":15,"column":29,"nodeType":"86","messageId":"87","endLine":15,"endColumn":31},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'submit' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'approvalData'. Either include it or remove the dependency array.","ArrayExpression",["90"],"React Hook useEffect has a missing dependency: 'seasonsObj'. Either include it or remove the dependency array. You can also do a functional update 'setSeasonsObj(s => ...)' if you only need 'seasonsObj' in the 'setSeasonsObj' call.",["91"],"'overallNumber' is assigned a value but never used.","'references' is assigned a value but never used.","'seasonNumber' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation",{"desc":"92","fix":"93"},{"desc":"94","fix":"95"},"Update the dependencies array to be: [approvalData]",{"range":"96","text":"97"},"Update the dependencies array to be: [seasonsObj, showSeason]",{"range":"98","text":"99"},[528,530],"[approvalData]",[929,941],"[seasonsObj, showSeason]"]
=======
[{"/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/index.js":"1","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/reportWebVitals.js":"2","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/App.js":"3","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/Navbar.js":"4","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/InputReferences.js":"5","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/Episode.js":"6","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/SeasonDisplay.js":"7","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/episodeReq.js":"8","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/NewReferencesDisplay.js":"9","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/LoginButton.js":"10","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/LogoutButton.js":"11","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/referencePost.js":"12"},{"size":506,"mtime":1609362364447,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1609273949542,"results":"15","hashOfConfig":"14"},{"size":1725,"mtime":1609691846149,"results":"16","hashOfConfig":"14"},{"size":1314,"mtime":1609686734392,"results":"17","hashOfConfig":"14"},{"size":6845,"mtime":1609690931394,"results":"18","hashOfConfig":"14"},{"size":234,"mtime":1609622906823,"results":"19","hashOfConfig":"14"},{"size":1788,"mtime":1609686734393,"results":"20","hashOfConfig":"14"},{"size":752,"mtime":1609622906825,"results":"21","hashOfConfig":"14"},{"size":2293,"mtime":1609686734392,"results":"22","hashOfConfig":"14"},{"size":219,"mtime":1609686734391,"results":"23","hashOfConfig":"14"},{"size":202,"mtime":1609686734391,"results":"24","hashOfConfig":"14"},{"size":639,"mtime":1609686734394,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1l7p9qi",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/index.js",[],["57","58"],"/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/reportWebVitals.js",[],"/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/App.js",["59"],"import React from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport { Auth0Provider } from \"@auth0/auth0-react\";\nimport './sass/App.scss';\nimport InputReferences from './components/InputReferences.js';\nimport Navbar from \"./components/Navbar.js\";\nimport SeasonDisplay from \"./components/SeasonDisplay\";\nimport Episode from \"./components/Episode\";\nimport NewReferencesDisplay from \"./components/NewReferencesDisplay\"\n\nconst App = () => {\n  return (\n    <Auth0Provider\n      domain=\"codedkhan.us.auth0.com\"\n      clientId=\"1fAqEsZEmLK7Lfrh0PP01H8YbIPCs1q0\"\n      redirectUri={window.location.origin}>\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"App\">\n          <header>\n            <div className=\"wrapper\">\n              <Route \n                path=\"/\" \n                component={Navbar} \n                />\n              {/* REVIEW title should reflect the purpose of our app (copyright!) */}\n              <h1>Gilmore girls API</h1>\n              <img src=\"./coffee.png\" alt=\"Coffee Cup\"/>\n              <Route \n                path=\"/approve\"\n                component={NewReferencesDisplay}\n              />\n            </div>\n          </header>\n          <main>\n            <Route \n              exact path=\"/season/:seasonNum\" \n              component={SeasonDisplay} \n            />\n            <Route\n              exact path=\"/season/:seasonNum/episode/:episodeNum\"\n              component={Episode}\n            />\n            <Route path=\"/input\" component={InputReferences} />\n          </main>\n          <footer>Created by Asif, Boris, Caitlin, and Greg</footer>\n        </div>\n      </Router>\n    </Auth0Provider>\n  );\n}\n\nexport default App;\n","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/Navbar.js",[],"/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/InputReferences.js",["60"],"import { useState } from 'react';\nimport axios from 'axios';\nimport Select from 'react-select';\nimport axiosRequest from \"./episodeReq.js\";\n// available seasons for the season number dropdown\nconst seasonOptions = [\n  { value: 1, label: \"1\" },\n  { value: 2, label: \"2\" },\n  { value: 3, label: \"3\" },\n  { value: 4, label: \"4\" },\n  { value: 5, label: \"5\" },\n  { value: 6, label: \"6\" },\n  { value: 7, label: \"7\" },\n]\n\n// this variable will be used to store the array of episodes that correspond to the selected season number\nlet episodeOptions = undefined;\n\n\nconst InputReferences = () => {\n  const [seasonNum, setSeasonNum] = useState(1);\n  const [episodeNum, setEpisodeNum] = useState(1);\n  const [subject, setSubject] = useState('');\n  const [timestamp, setTimestamp] = useState({ minutes: 0, seconds: 0 });\n  const { minutes, seconds } = timestamp;\n  const [quote, setQuote] = useState('');\n  const [speaker, setSpeaker] = useState('');\n  const [speakerContext, setSpeakerContext] = useState('');\n  const [meaning, setMeaning] = useState('');\n  const [submit, setSubmit] = useState(false);\n\n  const findEpisodes = (season) => {\n    // store the formatted episodes in the episodeOptions dropdown menu\n    episodeOptions = axiosRequest(season);\n    console.log(\"Did this work?\", episodeOptions);\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    // put the rest of the values on the form into an object that will be pushed to the episode array\n      // that object will be pushed to the episodes array\n    const reference = {\n      // id: 1, --> Array.length ; added in backend\n      subject: subject,\n      timestamp: `${minutes}:${seconds < 10 ? \"0\" + seconds: seconds}`,\n      quote: quote,\n      speaker: speaker,\n      context: speakerContext,\n      meaning: meaning,\n      // screenshot: \"https://some-picture-hosting-website.com/image\"\n    }\n    console.log(reference);\n    \n    // use the season number and episode number so that they can be used to check for the specific season and episode\n    axios({\n      method: 'POST',\n      url: 'https://project-gg.herokuapp.com/seasons/add',\n      data: {\n        \"seasonNumber\": seasonNum.value,\n        \"episodeNumber\": episodeNum.value,\n        \"references\": reference\n    }\n    }).then((res) => {\n      console.log('maloned', res);\n    }, (err) => console.log(err));\n\n    // set back to default values\n    setSeasonNum(1);\n    setEpisodeNum(1);\n    setSubject('');\n    setTimestamp({ minutes: 0, seconds: 0 });\n    setQuote('');\n    setSpeaker('');\n    setSpeakerContext('');\n    setMeaning('');\n    setSubmit('');\n\n    // TODO better UI; only inform the user that the reference was submitted if the post request was successful\n    alert(\"Reference Submitted!\");\n  }\n\n  return (\n    <section >\n      <h2>Add Your Reference!</h2>\n      <form action=\"submit\" className=\"referencesForm\" onSubmit={handleSubmit}>\n        <label htmlFor=\"seasonNum\">Season Number</label>\n        {/* NOTE even though the Selects are required, they both have an initial value of one, and the form submits even when nothing is chosen. */}\n        <Select\n          id=\"seasonNum\"\n          name=\"seasonNum\"\n          className=\"seasonSelect\"\n          value={seasonNum}\n          options={seasonOptions}\n          onChange={(seasonNum) => {\n            setSeasonNum(seasonNum);\n            findEpisodes(seasonNum.value);\n          }}\n          theme={theme => ({\n            ...theme,\n            borderRadius: 5,\n            colors: {\n              ...theme.colors,\n              primary25: '#dff3e3',\n              primary: '#142c53',\n            }\n          })}\n          required\n        />\n\n        <label htmlFor=\"episodeNum\">Episode Number</label>\n        <Select\n          id=\"episodeNum\"\n          name=\"episodeNum\"\n          className=\"seasonSelect\"\n          value={episodeNum}\n          options={episodeOptions}\n          onChange={(episodeNum) => {\n            setEpisodeNum(episodeNum);\n            findEpisodes(episodeNum.value); // TODO check to see if this is needed once the 503 error is gone\n          }}\n          theme={theme => ({\n            ...theme,\n            borderRadius: 5,\n            colors: {\n              ...theme.colors,\n              primary25: '#dff3e3',\n              primary: '#142c53',\n            }\n          })}\n          required\n        />\n\n        <label htmlFor=\"subject\">Subject</label>\n        <input\n          type=\"text\"\n          id=\"subject\"\n          name=\"subject\"\n          value={subject}\n          onChange={(e) => setSubject(e.target.value)}\n          required\n        />\n\n        <fieldset>\n          <legend>Time Stamp</legend>\n          <div className=\"minutes\">\n            <label htmlFor=\"minutes\">Minutes</label>\n            <input \n              type=\"number\"\n              id=\"minutes\"\n              name=\"minutes\"\n              value={minutes}\n              onChange={(e) => setTimestamp({...timestamp, minutes: e.target.value })}\n              min=\"0\"\n              max=\"60\"\n              required\n            />\n          </div>\n          <div className=\"seconds\">\n            <label htmlFor=\"seconds\">Seconds</label>\n            <input\n              type=\"number\"\n              id=\"seconds\"\n              name=\"seconds\"\n              value={seconds}\n              onChange={(e) => setTimestamp({ ...timestamp, seconds: e.target.value})}\n              min=\"0\"\n              max=\"59\"\n              required\n            />\n          </div>\n        </fieldset>\n\n        <label htmlFor=\"quote\">Quote</label>\n        <textarea\n          id=\"quote\"\n          name=\"quote\"\n          value={quote}\n          onChange={(e) => setQuote(e.target.value)}\n          required\n          ></textarea>\n\n        <label htmlFor=\"speaker\">Speaker</label>\n        <input\n          type=\"text\"\n          id=\"speaker\"\n          name=\"speaker\"\n          value={speaker}\n          onChange={(e) => setSpeaker(e.target.value)}\n          required\n        />\n\n        <label htmlFor=\"speakerContext\">Context</label>\n        <textarea\n          id=\"speakerContext\"\n          name=\"speakerContext\"\n          value={speakerContext}\n          onChange={(e) => setSpeakerContext(e.target.value)}\n          required\n        ></textarea>\n\n        <label htmlFor=\"meaning\">Meaning</label>\n        <textarea\n          id=\"meaning\"\n          name=\"meaning\"\n          value={meaning}\n          onChange={(e) => setMeaning(e.target.value)}\n          required\n        ></textarea>\n\n        <div className=\"buttons\">\n          {/* STRETCH */}\n          <button>Add Another Reference</button>\n          {/* REVIEW the form will still submit even if the Selects are empty; disable submit button until form is complete instead? */}\n          <input type=\"submit\" value=\"Submit\" />\n        </div>\n      </form>\n    </section>\n  );\n}\n\nexport default InputReferences;","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/Episode.js",[],"/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/SeasonDisplay.js",["61","62","63","64"],"import { useState, useEffect, } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport axios from 'axios';\n\nconst SeasonDisplay = () => {\n  const { seasonNum } = useParams();\n\n  const [seasonsObj, setSeasonsObj] = useState({});\n  const [showSeason, setShowSeason] = useState(seasonNum);\n  // line below is to prevent rerenders\n  if (showSeason !== seasonNum) setShowSeason(seasonNum);\n\n  // when the page gets loaded, initialize first season\n  // https://project-gg.herokuapp.com/seasons/1\n  // http://127.0.0.1:5000/seasons/1\n  useEffect(() => {\n    if (typeof seasonsObj[showSeason] === 'undefined') {\n      axios({\n        method: 'GET',\n        url: `https://project-gg.herokuapp.com/seasons/${showSeason}`\n      }).then(res => {\n        console.log('gotted');\n        setSeasonsObj({...seasonsObj, [showSeason]: [res.data[0]] })\n      }).catch(err => console.log(err));\n    }\n  }, [showSeason]);\n\n\n  return (  \n    <section className=\"seasons\">\n      <h2>Season {showSeason}</h2>\n      <ul className=\"episodeList wrapper\">\n        {\n          typeof seasonsObj[showSeason] !== 'undefined' && (\n            seasonsObj[showSeason][0].episodes.map((episode) => {\n              const { episodeNumber, name, overallNumber, references, seasonNumber } = episode;\n              return (\n                <li key={episodeNumber} className=\"episodeCard\">\n                  <div>\n                    <h3>{name}</h3>\n                    <h4> Episode {episodeNumber}</h4>\n                  </div>\n\n                  <p>Image Goes Here</p>\n                  <Link to={`/season/${showSeason}/episode/${episodeNumber}`} >See References</Link>\n                </li>\n              )\n            })\n          )\n        }\n      </ul>\n    </section>\n  )\n}\n\nexport default SeasonDisplay;\n","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/episodeReq.js",["65"],"import axios from 'axios';\n\nconst axiosRequest = (seasonNum) => {\n  // formatted array that has returned values from map, and then gets returned itself\n  const readyToExport = [];\n  // https://project-gg.herokuapp.com/seasons/${seasonNum}\n  axios({\n    method: 'GET',\n    url: `https://project-gg.herokuapp.com/seasons/${seasonNum}`,\n    responseType: \"json\"\n  }).then((res) => {\n    const episodesArr =res.data[0].episodes;\n    \n\n    episodesArr.map(episode => {\n      const formattedEpisode = {\n        value: episode.episodeNumber,\n        label: `${episode.episodeNumber} - ${episode.name}`\n      }\n      readyToExport.push(formattedEpisode);\n    });\n  }).catch((err) => console.log(err));\n  \n  return readyToExport;\n}\n\nexport default axiosRequest;","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/NewReferencesDisplay.js",["66"],"import { useState, useEffect, } from 'react';\nimport axios from 'axios';\nimport postRefToDb from './referencePost.js';\n\nconst NewReferencesDisplay = ()=> {\n  const [ approvalData, setApprovalData ] = useState([]);\n  \n  useEffect(() => {\n    axios({\n      method: 'GET',\n      url: `https://project-gg.herokuapp.com/seasons/approve`\n    }).then(res => {\n      console.log('Stuff to approve', res.data);\n      setApprovalData(res.data);\n      console.log(approvalData);\n    }).catch(err => console.log(err));\n  }, [])\n  console.log('Initial log');\n\n  return(\n    <div>\n      {\n        approvalData.map((item, episodeIndex) => {\n          return (\n            <article key={episodeIndex}>\n              <h3>Season: {item.seasonNumber}</h3>\n              <h3>Season: {item.episodeNumber}</h3>\n              {\n                item.references.map((reference, i) => {\n                  return (\n                    <article key={i}>\n                      <p>Subject: {reference.subject}</p>\n                      <p>Timestamp: {reference.timestamp}</p>\n                      <p>Quote: {reference.quote}</p>\n                      <p>Speaker: {reference.speaker}</p>\n                      <p>Context: {reference.context}</p>\n                      <p>Meaning: {reference.meaning}</p>\n                      <button onClick={ () => postRefToDb(reference.subject, reference.timestamp, reference.quote, reference.speaker, reference.context, reference.meaning, item.seasonNumber, item.episodeNumber, i) }>Approve</button>\n                    </article>\n                  )\n                })\n              }\n            </article>\n          )\n        })\n      }\n\n\n\n\n\n\n      {/* {approvalData.map((item, index) => {\n        return (\n          <article key={index}>\n            <p>Index: {index}</p>\n            <p>Subject: {item.subject}</p>\n            <p>Timestamp: {item.timestamp}</p>\n            <p>Quote: {item.quote}</p>\n            <p>Speaker: {item.speaker}</p>\n            <p>Context: {item.context}</p>\n            <p>Meaning: {item.meaning}</p>\n            <button onClick={ () => postRefToDb(item.subject, item.timestamp, item.quote, item.speaker, item.context, item.meaning) }>Approve</button>\n          </article>\n        )\n      })} */}\n    </div>\n  );\n}\n\n\nexport default NewReferencesDisplay;","/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/LoginButton.js",[],"/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/LogoutButton.js",[],"/Users/caitlinklotz/Documents/code/gilmoreGirlsAPI/project-gg/src/components/referencePost.js",[],["67","68"],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":2,"column":42,"nodeType":"75","messageId":"76","endLine":2,"endColumn":46},{"ruleId":"73","severity":1,"message":"77","line":30,"column":10,"nodeType":"75","messageId":"76","endLine":30,"endColumn":16},{"ruleId":"78","severity":1,"message":"79","line":26,"column":6,"nodeType":"80","endLine":26,"endColumn":18,"suggestions":"81"},{"ruleId":"73","severity":1,"message":"82","line":36,"column":44,"nodeType":"75","messageId":"76","endLine":36,"endColumn":57},{"ruleId":"73","severity":1,"message":"83","line":36,"column":59,"nodeType":"75","messageId":"76","endLine":36,"endColumn":69},{"ruleId":"73","severity":1,"message":"84","line":36,"column":71,"nodeType":"75","messageId":"76","endLine":36,"endColumn":83},{"ruleId":"85","severity":1,"message":"86","line":15,"column":29,"nodeType":"87","messageId":"88","endLine":15,"endColumn":31},{"ruleId":"78","severity":1,"message":"89","line":17,"column":6,"nodeType":"80","endLine":17,"endColumn":8,"suggestions":"90"},{"ruleId":"69","replacedBy":"91"},{"ruleId":"71","replacedBy":"92"},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'submit' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'seasonsObj'. Either include it or remove the dependency array. You can also do a functional update 'setSeasonsObj(s => ...)' if you only need 'seasonsObj' in the 'setSeasonsObj' call.","ArrayExpression",["95"],"'overallNumber' is assigned a value but never used.","'references' is assigned a value but never used.","'seasonNumber' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'approvalData'. Either include it or remove the dependency array.",["96"],["93"],["94"],"no-global-assign","no-unsafe-negation",{"desc":"97","fix":"98"},{"desc":"99","fix":"100"},"Update the dependencies array to be: [seasonsObj, showSeason]",{"range":"101","text":"102"},"Update the dependencies array to be: [approvalData]",{"range":"103","text":"104"},[904,916],"[seasonsObj, showSeason]",[512,514],"[approvalData]"]

>>>>>>> d43dd786b82c3c37e61d5d45c70f1e19e511b783
