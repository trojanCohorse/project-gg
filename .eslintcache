[{"C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\index.js":"1","C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\reportWebVitals.js":"2","C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\App.js":"3","C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\components\\Navbar.js":"4","C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\components\\InputReferences.js":"5","C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\components\\Episode.js":"6","C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\components\\SeasonDisplay.js":"7","C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\components\\LogoutButton.js":"8","C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\components\\LoginButton.js":"9","C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\components\\episodeReq.js":"10"},{"size":523,"mtime":1609438200455,"results":"11","hashOfConfig":"12"},{"size":375,"mtime":1609438200459,"results":"13","hashOfConfig":"12"},{"size":1192,"mtime":1609623021755,"results":"14","hashOfConfig":"12"},{"size":1281,"mtime":1609623846424,"results":"15","hashOfConfig":"12"},{"size":6526,"mtime":1609624121141,"results":"16","hashOfConfig":"12"},{"size":244,"mtime":1609622827993,"results":"17","hashOfConfig":"12"},{"size":1703,"mtime":1609622828000,"results":"18","hashOfConfig":"12"},{"size":210,"mtime":1609623487031,"results":"19","hashOfConfig":"12"},{"size":227,"mtime":1609623491501,"results":"20","hashOfConfig":"12"},{"size":778,"mtime":1609622828047,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"4ap19o",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},"C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\index.js",[],["47","48"],"C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\reportWebVitals.js",[],"C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\App.js",["49"],"import React from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport { Auth0Provider } from \"@auth0/auth0-react\";\r\nimport './sass/App.scss';\r\nimport InputReferences from './components/InputReferences.js';\r\nimport Navbar from \"./components/Navbar.js\";\r\nimport SeasonDisplay from \"./components/SeasonDisplay\";\r\nimport Episode from \"./components/Episode\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <Auth0Provider\r\n    domain=\"codedkhan.us.auth0.com\"\r\n    clientId=\"1fAqEsZEmLK7Lfrh0PP01H8YbIPCs1q0\"\r\n    redirectUri={window.location.origin}>\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n      <div className=\"App\">\r\n        <h1>Gilmore girls</h1>\r\n        <header>\r\n          <Route \r\n            path=\"/\" \r\n            component={Navbar} \r\n          />\r\n        </header>\r\n        <Route \r\n          exact path=\"/season/:seasonNum\" \r\n          component={SeasonDisplay} \r\n        />\r\n        <Route\r\n          exact path=\"/season/:seasonNum/episode/:episodeNum\"\r\n          component={Episode}\r\n        />\r\n        <Route path=\"/input\" component={InputReferences} />\r\n      </div>\r\n    </Router>\r\n  </Auth0Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\components\\Navbar.js",[],"C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\components\\InputReferences.js",["50"],"import { useState } from 'react';\r\nimport axios from 'axios';\r\nimport Select from 'react-select';\r\nimport axiosRequest from \"./episodeReq.js\";\r\n// available seasons for the season number dropdown\r\nconst seasonOptions = [\r\n  { value: 1, label: \"1\" },\r\n  { value: 2, label: \"2\" },\r\n  { value: 3, label: \"3\" },\r\n  { value: 4, label: \"4\" },\r\n  { value: 5, label: \"5\" },\r\n  { value: 6, label: \"6\" },\r\n  { value: 7, label: \"7\" },\r\n]\r\n\r\n// this variable will be used to store the array of episodes that correspond to the selected season number\r\nlet episodeOptions = undefined;\r\n\r\n\r\nconst InputReferences = () => {\r\n  const [seasonNum, setSeasonNum] = useState(1);\r\n  const [episodeNum, setEpisodeNum] = useState(1);\r\n  const [subject, setSubject] = useState('');\r\n  const [timestamp, setTimestamp] = useState({ minutes: 0, seconds: 0 });\r\n  const { minutes, seconds } = timestamp;\r\n  const [quote, setQuote] = useState('');\r\n  const [speaker, setSpeaker] = useState('');\r\n  const [speakerContext, setSpeakerContext] = useState('');\r\n  const [meaning, setMeaning] = useState('');\r\n  const [submit, setSubmit] = useState(false);\r\n\r\n  const findEpisodes = (season) => {\r\n    // store the formatted episodes in the episodeOptions dropdown menu\r\n    episodeOptions = axiosRequest(season);\r\n    console.log(\"Did this work?\", episodeOptions);\r\n  }\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    // put the rest of the values on the form into an object that will be pushed to the episode array\r\n      // that object will be pushed to the episodes array\r\n    const reference = {\r\n      // id: 1, --> Array.length ; added in backend\r\n      subject: subject,\r\n      timestamp: `${minutes}:${seconds < 10 ? \"0\" + seconds: seconds}`,\r\n      quote: quote,\r\n      speaker: speaker,\r\n      context: speakerContext,\r\n      meaning: meaning,\r\n      // screenshot: \"https://some-picture-hosting-website.com/image\"\r\n    }\r\n    console.log(reference);\r\n    \r\n    // use the season number and episode number so that they can be used to check for the specific season and episode\r\n    axios({\r\n      method: 'POST',\r\n      url: 'https://project-gg.herokuapp.com/seasons/add',\r\n      data: {\r\n        \"seasonNumber\": seasonNum.value,\r\n        \"episodeNumber\": episodeNum.value,\r\n        \"references\": reference\r\n    }\r\n    }).then((res) => {\r\n      console.log('maloned', res);\r\n    }, (err) => console.log(err));\r\n\r\n    // set back to default values\r\n    setSeasonNum(1);\r\n    setEpisodeNum(1);\r\n    setSubject('');\r\n    setTimestamp({ minutes: 0, seconds: 0 });\r\n    setQuote('');\r\n    setSpeaker('');\r\n    setSpeakerContext('');\r\n    setMeaning('');\r\n    setSubmit('');\r\n\r\n    // TODO better UI; only inform the user that the reference was submitted if the post request was successful\r\n    alert(\"Reference Submitted!\");\r\n  }\r\n\r\n  return (\r\n    <section className=\"referencesForm\">\r\n      <h2>Add Your Reference!</h2>\r\n      <form action=\"submit\" onSubmit={handleSubmit}>\r\n        <label htmlFor=\"seasonNum\">Season Number</label>\r\n        {/* NOTE even though the Selects are required, they both have an initial value of one, and the form submits even when nothing is chosen. */}\r\n        <Select\r\n          id=\"seasonNum\"\r\n          name=\"seasonNum\"\r\n          className=\"seasonSelect\"\r\n          value={seasonNum}\r\n          options={seasonOptions}\r\n          onChange={(seasonNum) => {\r\n            setSeasonNum(seasonNum);\r\n            findEpisodes(seasonNum.value);\r\n          }}\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"episodeNum\">Episode Number</label>\r\n        <Select\r\n          id=\"episodeNum\"\r\n          name=\"episodeNum\"\r\n          className=\"seasonSelect\"\r\n          value={episodeNum}\r\n          options={episodeOptions}\r\n          onChange={(episodeNum) => {\r\n            setEpisodeNum(episodeNum);\r\n            findEpisodes(episodeNum.value); // TODO check to see if this is needed once the 503 error is gone\r\n          }}\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"subject\">Subject</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"subject\"\r\n          name=\"subject\"\r\n          value={subject}\r\n          onChange={(e) => setSubject(e.target.value)}\r\n          required\r\n        />\r\n\r\n        <fieldset>\r\n          <legend>Time Stamp</legend>\r\n          <div className=\"minutes\">\r\n            <label htmlFor=\"minutes\">Minutes</label>\r\n            <input \r\n              type=\"number\"\r\n              id=\"minutes\"\r\n              name=\"minutes\"\r\n              value={minutes}\r\n              onChange={(e) => setTimestamp({...timestamp, minutes: e.target.value })}\r\n              min=\"0\"\r\n              max=\"60\"\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"seconds\">\r\n            <label htmlFor=\"seconds\">Seconds</label>\r\n            <input\r\n              type=\"number\"\r\n              id=\"seconds\"\r\n              name=\"seconds\"\r\n              value={seconds}\r\n              onChange={(e) => setTimestamp({ ...timestamp, seconds: e.target.value})}\r\n              min=\"0\"\r\n              max=\"59\"\r\n              required\r\n            />\r\n          </div>\r\n        </fieldset>\r\n\r\n        <label htmlFor=\"quote\">Quote</label>\r\n        <textarea\r\n          id=\"quote\"\r\n          name=\"quote\"\r\n          value={quote}\r\n          onChange={(e) => setQuote(e.target.value)}\r\n          required\r\n          ></textarea>\r\n\r\n        <label htmlFor=\"speaker\">Speaker</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"speaker\"\r\n          name=\"speaker\"\r\n          value={speaker}\r\n          onChange={(e) => setSpeaker(e.target.value)}\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"speakerContext\">Context</label>\r\n        <textarea\r\n          id=\"speakerContext\"\r\n          name=\"speakerContext\"\r\n          value={speakerContext}\r\n          onChange={(e) => setSpeakerContext(e.target.value)}\r\n          required\r\n        ></textarea>\r\n\r\n        <label htmlFor=\"meaning\">Meaning</label>\r\n        <textarea\r\n          id=\"meaning\"\r\n          name=\"meaning\"\r\n          value={meaning}\r\n          onChange={(e) => setMeaning(e.target.value)}\r\n          required\r\n        ></textarea>\r\n\r\n        {/* STRETCH */}\r\n        <button>Add Another Reference</button>\r\n        {/* REVIEW the form will still submit even if the Selects are empty; disable submit button until form is complete instead? */}\r\n        <input type=\"submit\" value=\"Submit\" />\r\n      </form>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default InputReferences;","C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\components\\Episode.js",[],"C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\components\\SeasonDisplay.js",["51","52","53","54"],"import { useState, useEffect, } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nconst SeasonDisplay = () => {\r\n  const { seasonNum } = useParams();\r\n\r\n  const [seasonsObj, setSeasonsObj] = useState({});\r\n  const [showSeason, setShowSeason] = useState(seasonNum);\r\n  // line below is to prevent rerenders\r\n  if (showSeason !== seasonNum) setShowSeason(seasonNum);\r\n\r\n  // when the page gets loaded, initialize first season\r\n  // https://project-gg.herokuapp.com/seasons/1\r\n  // http://127.0.0.1:5000/seasons/1\r\n  useEffect(() => {\r\n    if (typeof seasonsObj[showSeason] === 'undefined') {\r\n      axios({\r\n        method: 'GET',\r\n        url: `https://project-gg.herokuapp.com/seasons/${showSeason}`\r\n      }).then(res => {\r\n        console.log('gotted');\r\n        setSeasonsObj({...seasonsObj, [showSeason]: [res.data[0]] })\r\n      }).catch(err => console.log(err));\r\n    }\r\n  }, [showSeason]);\r\n\r\n  return (  \r\n    <div>\r\n      <h2>Season {showSeason}</h2>\r\n      <ul>\r\n        {\r\n          typeof seasonsObj[showSeason] !== 'undefined' && (\r\n            seasonsObj[showSeason][0].episodes.map((episode) => {\r\n              const { episodeNumber, name, overallNumber, references, seasonNumber } = episode;\r\n              return (\r\n                <li key={episodeNumber}>\r\n                  <h3>{name}</h3>\r\n                  <h4> Episode {episodeNumber}</h4>\r\n\r\n                  <p>Image Goes Here</p>\r\n                  <Link to={`/season/${showSeason}/episode/${episodeNumber}`} >See References</Link>\r\n                </li>\r\n              )\r\n            })\r\n          )\r\n        }\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SeasonDisplay;\r\n","C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\components\\LogoutButton.js",[],"C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\components\\LoginButton.js",[],"C:\\Users\\asif1\\Documents\\roadtoEngineer\\projects\\MERN\\firstMERN\\project-gg\\src\\components\\episodeReq.js",["55"],"import axios from 'axios';\r\n\r\nconst axiosRequest = (seasonNum) => {\r\n  // formatted array that has returned values from map, and then gets returned itself\r\n  const readyToExport = [];\r\n  // https://project-gg.herokuapp.com/seasons/${seasonNum}\r\n  axios({\r\n    method: 'GET',\r\n    url: `https://project-gg.herokuapp.com/seasons/${seasonNum}`,\r\n    responseType: \"json\"\r\n  }).then((res) => {\r\n    const episodesArr =res.data[0].episodes;\r\n    \r\n\r\n    episodesArr.map(episode => {\r\n      const formattedEpisode = {\r\n        value: episode.episodeNumber,\r\n        label: `${episode.episodeNumber} - ${episode.name}`\r\n      }\r\n      readyToExport.push(formattedEpisode);\r\n    });\r\n  }).catch((err) => console.log(err));\r\n  \r\n  return readyToExport;\r\n}\r\n\r\nexport default axiosRequest;",{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":2,"column":42,"nodeType":"62","messageId":"63","endLine":2,"endColumn":46},{"ruleId":"60","severity":1,"message":"64","line":30,"column":10,"nodeType":"62","messageId":"63","endLine":30,"endColumn":16},{"ruleId":"65","severity":1,"message":"66","line":26,"column":6,"nodeType":"67","endLine":26,"endColumn":18,"suggestions":"68"},{"ruleId":"60","severity":1,"message":"69","line":35,"column":44,"nodeType":"62","messageId":"63","endLine":35,"endColumn":57},{"ruleId":"60","severity":1,"message":"70","line":35,"column":59,"nodeType":"62","messageId":"63","endLine":35,"endColumn":69},{"ruleId":"60","severity":1,"message":"71","line":35,"column":71,"nodeType":"62","messageId":"63","endLine":35,"endColumn":83},{"ruleId":"72","severity":1,"message":"73","line":15,"column":29,"nodeType":"74","messageId":"75","endLine":15,"endColumn":31},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'submit' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'seasonsObj'. Either include it or remove the dependency array. You can also do a functional update 'setSeasonsObj(s => ...)' if you only need 'seasonsObj' in the 'setSeasonsObj' call.","ArrayExpression",["78"],"'overallNumber' is assigned a value but never used.","'references' is assigned a value but never used.","'seasonNumber' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation",{"desc":"79","fix":"80"},"Update the dependencies array to be: [seasonsObj, showSeason]",{"range":"81","text":"82"},[929,941],"[seasonsObj, showSeason]"]