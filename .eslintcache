[{"C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\index.js":"1","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\reportWebVitals.js":"2","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\App.js":"3","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\InputReferences.js":"4","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\Navbar.js":"5","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\Episode.js":"6","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\SeasonDisplay.js":"7","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\episodeReq.js":"8","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\Season.js":"9"},{"size":523,"mtime":1609618974014,"results":"10","hashOfConfig":"11"},{"size":375,"mtime":1609618974015,"results":"12","hashOfConfig":"11"},{"size":1012,"mtime":1609690647776,"results":"13","hashOfConfig":"11"},{"size":6557,"mtime":1609619679921,"results":"14","hashOfConfig":"11"},{"size":1042,"mtime":1609619635798,"results":"15","hashOfConfig":"11"},{"size":1187,"mtime":1609694816292,"results":"16","hashOfConfig":"11"},{"size":2930,"mtime":1609694932159,"results":"17","hashOfConfig":"11"},{"size":772,"mtime":1609621474956,"results":"18","hashOfConfig":"11"},{"size":755,"mtime":1609691136996,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1y4ub44",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\index.js",[],["42","43"],"C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\reportWebVitals.js",[],"C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\App.js",["44","45","46","47","48"],"C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\InputReferences.js",["49"],"import { useState } from 'react';\r\nimport axios from 'axios';\r\nimport Select from 'react-select';\r\nimport axiosRequest from './episodeReq.js';\r\n\r\n// available seasons for the season number dropdown\r\nconst seasonOptions = [\r\n  { value: 1, label: \"1\" },\r\n  { value: 2, label: \"2\" }, \r\n  { value: 3, label: \"3\" },\r\n  { value: 4, label: \"4\" },\r\n  { value: 5, label: \"5\" },\r\n  { value: 6, label: \"6\" },\r\n  { value: 7, label: \"7\" },\r\n]\r\n\r\n// this variable will be used to store the array of episodes that correspond to the selected season number\r\nlet episodeOptions = undefined;\r\n\r\n\r\nconst InputReferences = () => {\r\n  const [seasonNum, setSeasonNum] = useState(1);\r\n  const [episodeNum, setEpisodeNum] = useState(1);\r\n  const [subject, setSubject] = useState('');\r\n  const [timestamp, setTimestamp] = useState({ minutes: 0, seconds: 0 });\r\n  // destructure timestamp\r\n  const { minutes, seconds } = timestamp;\r\n  const [quote, setQuote] = useState('');\r\n  const [speaker, setSpeaker] = useState('');\r\n  const [speakerContext, setSpeakerContext] = useState('');\r\n  const [meaning, setMeaning] = useState('');\r\n  const [submit, setSubmit] = useState(false);\r\n\r\n  const findEpisodes = (season) => {\r\n    // store the formatted episodes in the episodeOptions dropdown menu\r\n    episodeOptions = axiosRequest(season);\r\n    console.log(\"Did this work?\", episodeOptions);\r\n  }\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    // put the rest of the values on the form into an object that will be pushed to the episode array\r\n      // that object will be pushed to the episodes array\r\n    const reference = {\r\n      // id: 1, --> Array.length ; added in backend\r\n      subject: subject,\r\n      timestamp: `${minutes}:${seconds < 10 ? \"0\" + seconds: seconds}`,\r\n      quote: quote,\r\n      speaker: speaker,\r\n      context: speakerContext,\r\n      meaning: meaning,\r\n      // screenshot: \"https://some-picture-hosting-website.com/image\"\r\n    }\r\n    console.log(reference);\r\n    \r\n    // use the season number and episode number so that they can be used to check for the specific season and episode\r\n    axios({\r\n      method: 'POST',\r\n      url: 'https://project-gg.herokuapp.com/seasons/add',\r\n      data: {\r\n        \"seasonNumber\": seasonNum.value,\r\n        \"episodeNumber\": episodeNum.value,\r\n        \"references\": reference\r\n    }\r\n    }).then((res) => {\r\n      console.log('maloned', res);\r\n    }, (err) => console.log(err));\r\n\r\n    // set back to default values\r\n    setSeasonNum(1);\r\n    setEpisodeNum(1);\r\n    setSubject('');\r\n    setTimestamp({ minutes: 0, seconds: 0 });\r\n    setQuote('');\r\n    setSpeaker('');\r\n    setSpeakerContext('');\r\n    setMeaning('');\r\n    setSubmit('');\r\n\r\n    // TODO better UI; only inform the user that the reference was submitted if the post request was successful\r\n    alert(\"Reference Submitted!\");\r\n  }\r\n\r\n  return (\r\n    <section className=\"referencesForm\">\r\n      <h2>Add Your Reference!</h2>\r\n      <form action=\"submit\" onSubmit={handleSubmit}>\r\n        <label htmlFor=\"seasonNum\">Season Number</label>\r\n        {/* NOTE even though the Selects are required, they both have an initial value of one, and the form submits even when nothing is chosen. */}\r\n        <Select\r\n          id=\"seasonNum\"\r\n          name=\"seasonNum\"\r\n          className=\"seasonSelect\"\r\n          value={seasonNum}\r\n          options={seasonOptions}\r\n          onChange={(seasonNum) => {\r\n            setSeasonNum(seasonNum);\r\n            findEpisodes(seasonNum.value);\r\n          }}\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"episodeNum\">Episode Number</label>\r\n        <Select\r\n          id=\"episodeNum\"\r\n          name=\"episodeNum\"\r\n          className=\"seasonSelect\"\r\n          value={episodeNum}\r\n          options={episodeOptions}\r\n          onChange={(episodeNum) => {\r\n            setEpisodeNum(episodeNum);\r\n            findEpisodes(episodeNum.value); // TODO check to see if this is needed once the 503 error is gone\r\n          }}\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"subject\">Subject</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"subject\"\r\n          name=\"subject\"\r\n          value={subject}\r\n          onChange={(e) => setSubject(e.target.value)}\r\n          required\r\n        />\r\n\r\n        <fieldset>\r\n          <legend>Time Stamp</legend>\r\n          <div className=\"minutes\">\r\n            <label htmlFor=\"minutes\">Minutes</label>\r\n            <input \r\n              type=\"number\"\r\n              id=\"minutes\"\r\n              name=\"minutes\"\r\n              value={minutes}\r\n              onChange={(e) => setTimestamp({...timestamp, minutes: e.target.value })}\r\n              min=\"0\"\r\n              max=\"60\"\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"seconds\">\r\n            <label htmlFor=\"seconds\">Seconds</label>\r\n            <input\r\n              type=\"number\"\r\n              id=\"seconds\"\r\n              name=\"seconds\"\r\n              value={seconds}\r\n              onChange={(e) => setTimestamp({ ...timestamp, seconds: e.target.value})}\r\n              min=\"0\"\r\n              max=\"59\"\r\n              required\r\n            />\r\n          </div>\r\n        </fieldset>\r\n\r\n        <label htmlFor=\"quote\">Quote</label>\r\n        <textarea\r\n          id=\"quote\"\r\n          name=\"quote\"\r\n          value={quote}\r\n          onChange={(e) => setQuote(e.target.value)}\r\n          required\r\n          ></textarea>\r\n\r\n        <label htmlFor=\"speaker\">Speaker</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"speaker\"\r\n          name=\"speaker\"\r\n          value={speaker}\r\n          onChange={(e) => setSpeaker(e.target.value)}\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"speakerContext\">Context</label>\r\n        <textarea\r\n          id=\"speakerContext\"\r\n          name=\"speakerContext\"\r\n          value={speakerContext}\r\n          onChange={(e) => setSpeakerContext(e.target.value)}\r\n          required\r\n        ></textarea>\r\n\r\n        <label htmlFor=\"meaning\">Meaning</label>\r\n        <textarea\r\n          id=\"meaning\"\r\n          name=\"meaning\"\r\n          value={meaning}\r\n          onChange={(e) => setMeaning(e.target.value)}\r\n          required\r\n        ></textarea>\r\n\r\n        {/* STRETCH */}\r\n        <button>Add Another Reference</button>\r\n        {/* REVIEW the form will still submit even if the Selects are empty; disable submit button until form is complete instead? */}\r\n        <input type=\"submit\" value=\"Submit\" />\r\n      </form>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default InputReferences;","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\Navbar.js",["50"],"import { Route } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <nav>\r\n      <ul>\r\n        <div className=\"seasons\">\r\n          <li>\r\n            <Link to=\"/season/1\" >Season 1</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/season/2\" >Season 2</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/season/3\" >Season 3</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/season/4\" >Season 4</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/season/5\" >Season 5</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/season/6\" >Season 6</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/season/7\" >Season 7</Link>\r\n          </li>\r\n        </div>\r\n        <div className=\"navLinks\">\r\n          <li>\r\n            <Link to=\"/input\">New Reference</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/\">Log In</Link>\r\n          </li>\r\n        </div>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\Episode.js",["51","52","53","54"],"C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\SeasonDisplay.js",["55","56","57","58"],"C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\episodeReq.js",["59"],"import axios from 'axios';\r\n\r\nconst axiosRequest = (seasonNum) => {\r\n  // formatted array that has returned values from map, and then gets returned itself\r\n  const readyToExport = [];\r\n  // https://project-gg.herokuapp.com/seasons/${seasonNum}\r\n  axios({\r\n    method: 'GET',\r\n    url: `https://project-gg.herokuapp.com/seasons/${seasonNum}`,\r\n    responseType: \"json\"\r\n  }).then((res) => {\r\n    const episodesArr =res.data[0].episodes;\r\n\r\n    episodesArr.map(episode => {\r\n      const formattedEpisode = {\r\n        value: episode.episodeNumber,\r\n        label: `${episode.episodeNumber} - ${episode.name}`\r\n      }\r\n      readyToExport.push(formattedEpisode);\r\n    });\r\n  }).catch((err) => console.log(err));\r\n  \r\n  return readyToExport;\r\n}\r\n\r\nexport default axiosRequest;","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\Season.js",["60","61"],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":1,"column":17,"nodeType":"68","messageId":"69","endLine":1,"endColumn":25},{"ruleId":"66","severity":1,"message":"70","line":2,"column":42,"nodeType":"68","messageId":"69","endLine":2,"endColumn":46},{"ruleId":"66","severity":1,"message":"71","line":2,"column":48,"nodeType":"68","messageId":"69","endLine":2,"endColumn":57},{"ruleId":"66","severity":1,"message":"72","line":7,"column":8,"nodeType":"68","messageId":"69","endLine":7,"endColumn":15},{"ruleId":"66","severity":1,"message":"73","line":8,"column":8,"nodeType":"68","messageId":"69","endLine":8,"endColumn":14},{"ruleId":"66","severity":1,"message":"74","line":32,"column":10,"nodeType":"68","messageId":"69","endLine":32,"endColumn":16},{"ruleId":"66","severity":1,"message":"75","line":1,"column":10,"nodeType":"68","messageId":"69","endLine":1,"endColumn":15},{"ruleId":"76","severity":1,"message":"77","line":11,"column":13,"nodeType":"78","endLine":14,"endColumn":4},{"ruleId":"66","severity":1,"message":"79","line":12,"column":11,"nodeType":"68","messageId":"69","endLine":12,"endColumn":17},{"ruleId":"76","severity":1,"message":"80","line":14,"column":6,"nodeType":"81","endLine":14,"endColumn":8,"suggestions":"82"},{"ruleId":"76","severity":1,"message":"83","line":18,"column":6,"nodeType":"81","endLine":18,"endColumn":14,"suggestions":"84"},{"ruleId":"66","severity":1,"message":"70","line":2,"column":17,"nodeType":"68","messageId":"69","endLine":2,"endColumn":21},{"ruleId":"76","severity":1,"message":"85","line":47,"column":6,"nodeType":"81","endLine":47,"endColumn":18,"suggestions":"86"},{"ruleId":"87","severity":1,"message":"88","line":82,"column":3,"nodeType":"89","messageId":"90","endLine":93,"endColumn":4},{"ruleId":"91","severity":1,"message":"92","line":99,"column":1,"nodeType":"93","messageId":"94","endLine":102,"endColumn":9},{"ruleId":"95","severity":1,"message":"96","line":14,"column":29,"nodeType":"78","messageId":"97","endLine":14,"endColumn":31},{"ruleId":"66","severity":1,"message":"98","line":10,"column":44,"nodeType":"68","messageId":"69","endLine":10,"endColumn":57},{"ruleId":"66","severity":1,"message":"99","line":10,"column":59,"nodeType":"68","messageId":"69","endLine":10,"endColumn":69},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'useParams' is defined but never used.","'Episode' is defined but never used.","'Season' is defined but never used.","'submit' is assigned a value but never used.","'Route' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'result' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'episodeNum' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["102"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["103"],"React Hook useEffect has a missing dependency: 'seasonsObj'. Either include it or remove the dependency array. You can also do a functional update 'setSeasonsObj(s => ...)' if you only need 'seasonsObj' in the 'setSeasonsObj' call.",["104"],"no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","'overallNumber' is assigned a value but never used.","'references' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"105","fix":"106"},{"desc":"107","fix":"108"},{"desc":"109","fix":"110"},"Update the dependencies array to be: [episodeNum, props]",{"range":"111","text":"112"},"Update the dependencies array to be: [props, result]",{"range":"113","text":"114"},"Update the dependencies array to be: [seasonsObj, showSeason]",{"range":"115","text":"116"},[463,465],"[episodeNum, props]",[558,566],"[props, result]",[1666,1678],"[seasonsObj, showSeason]"]