[{"C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\index.js":"1","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\reportWebVitals.js":"2","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\App.js":"3","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\InputReferences.js":"4","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\Navbar.js":"5","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\Episode.js":"6","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\SeasonDisplay.js":"7","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\NewReferencesDisplay.js":"8","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\episodeReq.js":"9","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\LoginButton.js":"10","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\LogoutButton.js":"11","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\Season.js":"12","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\referencePost.js":"13"},{"size":523,"mtime":1609618974014,"results":"14","hashOfConfig":"15"},{"size":375,"mtime":1609618974015,"results":"16","hashOfConfig":"15"},{"size":1639,"mtime":1609695330379,"results":"17","hashOfConfig":"15"},{"size":7319,"mtime":1609696516369,"results":"18","hashOfConfig":"15"},{"size":1366,"mtime":1609695330381,"results":"19","hashOfConfig":"15"},{"size":1187,"mtime":1609694816292,"results":"20","hashOfConfig":"15"},{"size":2623,"mtime":1609695330382,"results":"21","hashOfConfig":"15"},{"size":2364,"mtime":1609695330382,"results":"22","hashOfConfig":"15"},{"size":772,"mtime":1609621474956,"results":"23","hashOfConfig":"15"},{"size":227,"mtime":1609695330380,"results":"24","hashOfConfig":"15"},{"size":210,"mtime":1609695330380,"results":"25","hashOfConfig":"15"},{"size":755,"mtime":1609691136996,"results":"26","hashOfConfig":"15"},{"size":662,"mtime":1609695330383,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1y4ub44",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\index.js",[],["62","63"],"C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\reportWebVitals.js",[],"C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\App.js",["64","65"],"import React from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport { Auth0Provider } from \"@auth0/auth0-react\";\r\nimport './sass/App.scss';\r\nimport InputReferences from './components/InputReferences.js';\r\nimport Navbar from \"./components/Navbar.js\";\r\nimport SeasonDisplay from \"./components/SeasonDisplay\";\r\nimport Episode from \"./components/Episode\";\r\nimport NewReferencesDisplay from \"./components/NewReferencesDisplay\"\r\n\r\nconst App = () => {\r\n  return (\r\n    <Auth0Provider\r\n      domain=\"codedkhan.us.auth0.com\"\r\n      clientId=\"1fAqEsZEmLK7Lfrh0PP01H8YbIPCs1q0\"\r\n      redirectUri={window.location.origin}>\r\n      <Router basename={process.env.PUBLIC_URL}>\r\n        <div className=\"App\">\r\n          <header>\r\n            <div className=\"wrapper\">\r\n              <Route \r\n                path=\"/\" \r\n                component={Navbar} \r\n                />\r\n              {/* REVIEW title should reflect the purpose of our app (copyright!) */}\r\n              <h1>Gilmore girls API</h1>\r\n              <img src=\"./coffee.png\" alt=\"Coffee Cup\"/>\r\n              <Route \r\n                path=\"/approve\"\r\n                component={NewReferencesDisplay}\r\n              />\r\n            </div>\r\n          </header>\r\n          <main>\r\n            <Route \r\n              exact path=\"/season/:seasonNum\" \r\n              component={SeasonDisplay} \r\n            />\r\n            <Route path=\"/input\" component={InputReferences} />\r\n          </main>\r\n          <footer>Created by Asif, Boris, Caitlin, and Greg</footer>\r\n        </div>\r\n      </Router>\r\n    </Auth0Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\InputReferences.js",["66"],"import { useState } from 'react';\r\nimport axios from 'axios';\r\nimport Select from 'react-select';\r\nimport axiosRequest from \"./episodeReq.js\";\r\n// available seasons for the season number dropdown\r\nconst seasonOptions = [\r\n  { value: 1, label: \"1\" },\r\n  { value: 2, label: \"2\" },\r\n  { value: 3, label: \"3\" },\r\n  { value: 4, label: \"4\" },\r\n  { value: 5, label: \"5\" },\r\n  { value: 6, label: \"6\" },\r\n  { value: 7, label: \"7\" },\r\n]\r\n\r\n// this variable will be used to store the array of episodes that correspond to the selected season number\r\nlet episodeOptions = undefined;\r\n\r\n\r\nconst InputReferences = () => {\r\n  const [seasonNum, setSeasonNum] = useState(1);\r\n  const [episodeNum, setEpisodeNum] = useState(1);\r\n  const [subject, setSubject] = useState('');\r\n  const [timestamp, setTimestamp] = useState({ minutes: 0, seconds: 0 });\r\n  const { minutes, seconds } = timestamp;\r\n  const [quote, setQuote] = useState('');\r\n  const [speaker, setSpeaker] = useState('');\r\n  const [speakerContext, setSpeakerContext] = useState('');\r\n  const [meaning, setMeaning] = useState('');\r\n  const [submit, setSubmit] = useState(false);\r\n\r\n  const findEpisodes = (season) => {\r\n    // store the formatted episodes in the episodeOptions dropdown menu\r\n    episodeOptions = axiosRequest(season);\r\n    console.log(\"Did this work?\", episodeOptions);\r\n  }\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    // put the rest of the values on the form into an object that will be pushed to the episode array\r\n      // that object will be pushed to the episodes array\r\n    const reference = {\r\n      // id: 1, --> Array.length ; added in backend\r\n      subject: subject,\r\n      timestamp: `${minutes}:${seconds < 10 ? \"0\" + seconds: seconds}`,\r\n      quote: quote,\r\n      speaker: speaker,\r\n      context: speakerContext,\r\n      meaning: meaning,\r\n      // screenshot: \"https://some-picture-hosting-website.com/image\"\r\n    }\r\n    console.log(reference);\r\n    \r\n    // use the season number and episode number so that they can be used to check for the specific season and episode\r\n    // https://project-gg.herokuapp.com/seasons/add\r\n    // \"references\": reference\r\n\r\n    axios({\r\n      method: 'POST',\r\n      url: 'http://127.0.0.1:5000/seasons/add',\r\n      data: {\r\n        seasonNumber: \"1\",\r\n        episodeNumber: \"5\",\r\n        references: {\r\n          context: \"Hey, does postman work\",\r\n          meaning: \"12341234\",\r\n          quote: \"12341234\",\r\n          speaker: \"12341234\",\r\n          subject: \"123412341232345234\",\r\n          timestamp: \"0:00\"\r\n        }}\r\n    }).then((res) => {\r\n      console.log('maloned', res);\r\n    }, (err) => console.log(err));\r\n\r\n    // set back to default values\r\n    setSeasonNum(1);\r\n    setEpisodeNum(1);\r\n    setSubject('');\r\n    setTimestamp({ minutes: 0, seconds: 0 });\r\n    setQuote('');\r\n    setSpeaker('');\r\n    setSpeakerContext('');\r\n    setMeaning('');\r\n    setSubmit('');\r\n\r\n    // TODO better UI; only inform the user that the reference was submitted if the post request was successful\r\n    alert(\"Reference Submitted!\");\r\n  }\r\n\r\n  return (\r\n    <section >\r\n      <h2>Add Your Reference!</h2>\r\n      <form action=\"submit\" className=\"referencesForm\" onSubmit={handleSubmit}>\r\n        <label htmlFor=\"seasonNum\">Season Number</label>\r\n        {/* NOTE even though the Selects are required, they both have an initial value of one, and the form submits even when nothing is chosen. */}\r\n        <Select\r\n          id=\"seasonNum\"\r\n          name=\"seasonNum\"\r\n          className=\"seasonSelect\"\r\n          value={seasonNum}\r\n          options={seasonOptions}\r\n          onChange={(seasonNum) => {\r\n            setSeasonNum(seasonNum);\r\n            findEpisodes(seasonNum.value);\r\n          }}\r\n          theme={theme => ({\r\n            ...theme,\r\n            borderRadius: 5,\r\n            colors: {\r\n              ...theme.colors,\r\n              primary25: '#dff3e3',\r\n              primary: '#142c53',\r\n            }\r\n          })}\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"episodeNum\">Episode Number</label>\r\n        <Select\r\n          id=\"episodeNum\"\r\n          name=\"episodeNum\"\r\n          className=\"seasonSelect\"\r\n          value={episodeNum}\r\n          options={episodeOptions}\r\n          onChange={(episodeNum) => {\r\n            setEpisodeNum(episodeNum);\r\n            findEpisodes(episodeNum.value); // TODO check to see if this is needed once the 503 error is gone\r\n          }}\r\n          theme={theme => ({\r\n            ...theme,\r\n            borderRadius: 5,\r\n            colors: {\r\n              ...theme.colors,\r\n              primary25: '#dff3e3',\r\n              primary: '#142c53',\r\n            }\r\n          })}\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"subject\">Subject</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"subject\"\r\n          name=\"subject\"\r\n          value={subject}\r\n          onChange={(e) => setSubject(e.target.value)}\r\n          required\r\n        />\r\n\r\n        <fieldset>\r\n          <legend>Time Stamp</legend>\r\n          <div className=\"minutes\">\r\n            <label htmlFor=\"minutes\">Minutes</label>\r\n            <input \r\n              type=\"number\"\r\n              id=\"minutes\"\r\n              name=\"minutes\"\r\n              value={minutes}\r\n              onChange={(e) => setTimestamp({...timestamp, minutes: e.target.value })}\r\n              min=\"0\"\r\n              max=\"60\"\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"seconds\">\r\n            <label htmlFor=\"seconds\">Seconds</label>\r\n            <input\r\n              type=\"number\"\r\n              id=\"seconds\"\r\n              name=\"seconds\"\r\n              value={seconds}\r\n              onChange={(e) => setTimestamp({ ...timestamp, seconds: e.target.value})}\r\n              min=\"0\"\r\n              max=\"59\"\r\n              required\r\n            />\r\n          </div>\r\n        </fieldset>\r\n\r\n        <label htmlFor=\"quote\">Quote</label>\r\n        <textarea\r\n          id=\"quote\"\r\n          name=\"quote\"\r\n          value={quote}\r\n          onChange={(e) => setQuote(e.target.value)}\r\n          required\r\n          ></textarea>\r\n\r\n        <label htmlFor=\"speaker\">Speaker</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"speaker\"\r\n          name=\"speaker\"\r\n          value={speaker}\r\n          onChange={(e) => setSpeaker(e.target.value)}\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"speakerContext\">Context</label>\r\n        <textarea\r\n          id=\"speakerContext\"\r\n          name=\"speakerContext\"\r\n          value={speakerContext}\r\n          onChange={(e) => setSpeakerContext(e.target.value)}\r\n          required\r\n        ></textarea>\r\n\r\n        <label htmlFor=\"meaning\">Meaning</label>\r\n        <textarea\r\n          id=\"meaning\"\r\n          name=\"meaning\"\r\n          value={meaning}\r\n          onChange={(e) => setMeaning(e.target.value)}\r\n          required\r\n        ></textarea>\r\n\r\n        <div className=\"buttons\">\r\n          {/* STRETCH */}\r\n          <button>Add Another Reference</button>\r\n          {/* REVIEW the form will still submit even if the Selects are empty; disable submit button until form is complete instead? */}\r\n          <input type=\"submit\" value=\"Submit\" />\r\n        </div>\r\n      </form>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default InputReferences;","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\Navbar.js",[],"C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\Episode.js",["67","68","69","70"],"// import { useState, useEffect } from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n// import axios from 'axios';\r\n\r\nconst Episode = (props) => { \r\n  const { episodeNum } = useParams();\r\n  const [result, setResult] = useState(0);\r\n  const [episodeResult, setEpisodeResult] = useState([]);\r\n\r\n  useEffect(async () => {\r\n    const result = await props.changeEpisodeNum(episodeNum);\r\n    setResult(5);\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    props.getEpisode().then((res) => setEpisodeResult(res));\r\n  }, [result])\r\n\r\n  // console.log(result);\r\n  // console.log(props.episodeObj[props.seasonNum]);\r\n  // console.log(props.episodeObj[props.seasonNum][episodeNum].episodeNumber);\r\n  // const episodeObj = props.episodeObj;\r\n\r\n  // console.log(episodeNum, props.seasonNum);\r\n\r\n  return (\r\n    <section className=\"episodeInfo\">\r\n      <p>episode info here</p>\r\n      {episodeResult && (\r\n        <p>{episodeResult.episodeNumber}</p>\r\n      )}\r\n      {/* { Object.keys(episodeObj).length > 0 && (\r\n        <p>{props.episodeObj[props.seasonNum][episodeNum].episodeNumber}</p>\r\n      )} */}\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Episode;","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\SeasonDisplay.js",["71","72"],"import { useState, useEffect, } from 'react';\r\nimport { Route, Link, useParams, Switch, useRouteMatch } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Episode from './Episode.js';\r\nimport Season from './Season.js';\r\n\r\nconst SeasonDisplay = () => {\r\n  const { seasonNum } = useParams();\r\n  const { url } = useRouteMatch();\r\n  const [episodeObj, setEpisodeObj] = useState({});\r\n  const [episodeNum, setEpisodeNum] = useState(1);\r\n\r\n  // useEffect(() => {\r\n  //   if (!episodeObj[seasonNum]) {\r\n  //     getEpisode();\r\n  //   } else if (!episodeObj[seasonNum][episodeNum]) {\r\n  //     getEpisode();\r\n  //   }\r\n  // }, [episodeNum])\r\n\r\n  const getEpisodeAxios = async () => {\r\n    return await axios.get(`https://project-gg.herokuapp.com/seasons/${seasonNum}/episodes/${episodeNum}`)\r\n      .then(res => {\r\n        const newEpisodeObj = episodeObj;\r\n        newEpisodeObj[seasonNum] = { [episodeNum]: res.data[0] };\r\n        setEpisodeObj(newEpisodeObj);\r\n        console.log(res);\r\n        return res.data[0];\r\n      })\r\n      .catch(err => console.log('Err: ', err));\r\n  }\r\n\r\n  const [seasonsObj, setSeasonsObj] = useState({});\r\n  const [showSeason, setShowSeason] = useState(seasonNum);\r\n  if (showSeason !== seasonNum) setShowSeason(seasonNum); // this is to prevent rerenders\r\n\r\n  useEffect(() => {\r\n    if (typeof seasonsObj[showSeason] === 'undefined') {\r\n      axios({\r\n        method: 'GET',\r\n        url: `https://project-gg.herokuapp.com/seasons/${showSeason}`\r\n      }).then(res => {\r\n        // console.log('gotted');\r\n        setSeasonsObj({...seasonsObj, [showSeason]: [res.data[0]] })\r\n      }).catch(err => console.log(err));\r\n    }\r\n  }, [showSeason]);\r\n\r\n  const changeEpisodeNum = (num) => {\r\n    setEpisodeNum(num);\r\n    return num;\r\n  }\r\n\r\n  const getEpisode = async () => {\r\n    console.log(episodeNum);\r\n    if (!episodeObj[seasonNum]) {\r\n      const result = await getEpisodeAxios();\r\n      console.log({result});\r\n      return result;\r\n    } else if (!episodeObj[seasonNum][episodeNum]) {\r\n      const result = await getEpisodeAxios();\r\n      console.log({result});\r\n      return result;\r\n    }\r\n    return episodeObj[seasonNum][episodeNum];\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <p>this is where it goes...</p>\r\n      <Switch>\r\n        <Route exact path={`${url}`} render={() => (\r\n          <Season season={seasonsObj[showSeason]} />\r\n        )} />\r\n        <Route path={`${url}/episode/:episodeNum`} render={() => (\r\n          <Episode getEpisode={getEpisode} changeEpisodeNum={changeEpisodeNum} />\r\n        )} />\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SeasonDisplay;\r\n","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\NewReferencesDisplay.js",["73"],"import { useState, useEffect, } from 'react';\r\nimport axios from 'axios';\r\nimport postRefToDb from './referencePost.js';\r\n\r\nconst NewReferencesDisplay = ()=> {\r\n  const [ approvalData, setApprovalData ] = useState([]);\r\n  \r\n  useEffect(() => {\r\n    axios({\r\n      method: 'GET',\r\n      url: `https://project-gg.herokuapp.com/seasons/approve`\r\n    }).then(res => {\r\n      console.log('Stuff to approve', res.data);\r\n      setApprovalData(res.data);\r\n      console.log(approvalData);\r\n    }).catch(err => console.log(err));\r\n  }, [])\r\n  console.log('Initial log');\r\n\r\n  return(\r\n    <div>\r\n      {\r\n        approvalData.map((item, episodeIndex) => {\r\n          return (\r\n            <article key={episodeIndex}>\r\n              <h3>Season: {item.seasonNumber}</h3>\r\n              <h3>Season: {item.episodeNumber}</h3>\r\n              {\r\n                item.references.map((reference, i) => {\r\n                  return (\r\n                    <article key={i}>\r\n                      <p>Subject: {reference.subject}</p>\r\n                      <p>Timestamp: {reference.timestamp}</p>\r\n                      <p>Quote: {reference.quote}</p>\r\n                      <p>Speaker: {reference.speaker}</p>\r\n                      <p>Context: {reference.context}</p>\r\n                      <p>Meaning: {reference.meaning}</p>\r\n                      <button onClick={ () => postRefToDb(reference.subject, reference.timestamp, reference.quote, reference.speaker, reference.context, reference.meaning, item.seasonNumber, item.episodeNumber, i) }>Approve</button>\r\n                    </article>\r\n                  )\r\n                })\r\n              }\r\n            </article>\r\n          )\r\n        })\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n\r\n      {/* {approvalData.map((item, index) => {\r\n        return (\r\n          <article key={index}>\r\n            <p>Index: {index}</p>\r\n            <p>Subject: {item.subject}</p>\r\n            <p>Timestamp: {item.timestamp}</p>\r\n            <p>Quote: {item.quote}</p>\r\n            <p>Speaker: {item.speaker}</p>\r\n            <p>Context: {item.context}</p>\r\n            <p>Meaning: {item.meaning}</p>\r\n            <button onClick={ () => postRefToDb(item.subject, item.timestamp, item.quote, item.speaker, item.context, item.meaning) }>Approve</button>\r\n          </article>\r\n        )\r\n      })} */}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default NewReferencesDisplay;","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\episodeReq.js",["74"],"import axios from 'axios';\r\n\r\nconst axiosRequest = (seasonNum) => {\r\n  // formatted array that has returned values from map, and then gets returned itself\r\n  const readyToExport = [];\r\n  // https://project-gg.herokuapp.com/seasons/${seasonNum}\r\n  axios({\r\n    method: 'GET',\r\n    url: `https://project-gg.herokuapp.com/seasons/${seasonNum}`,\r\n    responseType: \"json\"\r\n  }).then((res) => {\r\n    const episodesArr =res.data[0].episodes;\r\n\r\n    episodesArr.map(episode => {\r\n      const formattedEpisode = {\r\n        value: episode.episodeNumber,\r\n        label: `${episode.episodeNumber} - ${episode.name}`\r\n      }\r\n      readyToExport.push(formattedEpisode);\r\n    });\r\n  }).catch((err) => console.log(err));\r\n  \r\n  return readyToExport;\r\n}\r\n\r\nexport default axiosRequest;","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\LoginButton.js",[],"C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\LogoutButton.js",[],"C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\Season.js",["75","76"],"import { Link } from 'react-router-dom';\r\n\r\nconst Season = ({ season }) => {\r\n  return (\r\n    <div>\r\n      <ul>\r\n        {\r\n          typeof season !== 'undefined' && (\r\n            season[0].episodes.map((episode) => {\r\n              const { episodeNumber, name, overallNumber, references, seasonNumber } = episode;\r\n              return (\r\n                <li key={episodeNumber}>\r\n                  <h3>{name}</h3>\r\n                  <h4> Episode {episodeNumber}</h4>\r\n                  <p>Image Goes Here</p>\r\n                  <Link to={`/season/${seasonNumber}/episode/${episodeNumber}`} >See References</Link>\r\n                </li>\r\n              )\r\n            })\r\n          )\r\n        }\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Season;","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\referencePost.js",[],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":2,"column":42,"nodeType":"83","messageId":"84","endLine":2,"endColumn":46},{"ruleId":"81","severity":1,"message":"85","line":8,"column":8,"nodeType":"83","messageId":"84","endLine":8,"endColumn":15},{"ruleId":"81","severity":1,"message":"86","line":30,"column":10,"nodeType":"83","messageId":"84","endLine":30,"endColumn":16},{"ruleId":"87","severity":1,"message":"88","line":11,"column":13,"nodeType":"89","endLine":14,"endColumn":4},{"ruleId":"81","severity":1,"message":"90","line":12,"column":11,"nodeType":"83","messageId":"84","endLine":12,"endColumn":17},{"ruleId":"87","severity":1,"message":"91","line":14,"column":6,"nodeType":"92","endLine":14,"endColumn":8,"suggestions":"93"},{"ruleId":"87","severity":1,"message":"94","line":18,"column":6,"nodeType":"92","endLine":18,"endColumn":14,"suggestions":"95"},{"ruleId":"81","severity":1,"message":"82","line":2,"column":17,"nodeType":"83","messageId":"84","endLine":2,"endColumn":21},{"ruleId":"87","severity":1,"message":"96","line":47,"column":6,"nodeType":"92","endLine":47,"endColumn":18,"suggestions":"97"},{"ruleId":"87","severity":1,"message":"98","line":17,"column":6,"nodeType":"92","endLine":17,"endColumn":8,"suggestions":"99"},{"ruleId":"100","severity":1,"message":"101","line":14,"column":29,"nodeType":"89","messageId":"102","endLine":14,"endColumn":31},{"ruleId":"81","severity":1,"message":"103","line":10,"column":44,"nodeType":"83","messageId":"84","endLine":10,"endColumn":57},{"ruleId":"81","severity":1,"message":"104","line":10,"column":59,"nodeType":"83","messageId":"84","endLine":10,"endColumn":69},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'Episode' is defined but never used.","'submit' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'result' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'episodeNum' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["107"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["108"],"React Hook useEffect has a missing dependency: 'seasonsObj'. Either include it or remove the dependency array. You can also do a functional update 'setSeasonsObj(s => ...)' if you only need 'seasonsObj' in the 'setSeasonsObj' call.",["109"],"React Hook useEffect has a missing dependency: 'approvalData'. Either include it or remove the dependency array.",["110"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","'overallNumber' is assigned a value but never used.","'references' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"111","fix":"112"},{"desc":"113","fix":"114"},{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},"Update the dependencies array to be: [episodeNum, props]",{"range":"119","text":"120"},"Update the dependencies array to be: [props, result]",{"range":"121","text":"122"},"Update the dependencies array to be: [seasonsObj, showSeason]",{"range":"123","text":"124"},"Update the dependencies array to be: [approvalData]",{"range":"125","text":"126"},[463,465],"[episodeNum, props]",[558,566],"[props, result]",[1666,1678],"[seasonsObj, showSeason]",[528,530],"[approvalData]"]