[{"C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\index.js":"1","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\App.js":"2","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\reportWebVitals.js":"3","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\InputReferences.js":"4","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\EpisodeRequest.js":"5","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\episodeRequest.js":"6","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\Navbar.js":"7"},{"size":523,"mtime":1609363640254,"results":"8","hashOfConfig":"9"},{"size":591,"mtime":1609603621877,"results":"10","hashOfConfig":"9"},{"size":375,"mtime":1609273869291,"results":"11","hashOfConfig":"9"},{"size":6532,"mtime":1609600534324,"results":"12","hashOfConfig":"9"},{"size":939,"mtime":1609602676859,"results":"13","hashOfConfig":"9"},{"size":939,"mtime":1609602676859,"results":"14","hashOfConfig":"9"},{"size":2214,"mtime":1609604801199,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1y4ub44",{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\index.js",[],["34","35"],"C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\App.js",["36","37"],"import React from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport './sass/App.scss';\r\nimport InputReferences from './components/InputReferences.js';\r\nimport Navbar from \"./components/Navbar.js\";\r\nimport axios from 'axios';\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n      <div className=\"App\">\r\n        <header>\r\n          <Route path=\"/\" component={Navbar} />\r\n        </header>\r\n        <Route path=\"/input\" component={InputReferences} />\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\reportWebVitals.js",[],"C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\InputReferences.js",["38"],"import { useState } from 'react';\r\nimport axios from 'axios';\r\nimport Select from 'react-select';\r\nimport axiosRequest from \"./episodeRequest.js\";\r\n\r\n// available seasons for the season number dropdown\r\nconst seasonOptions = [\r\n  { value: 1, label: \"1\" },\r\n  { value: 2, label: \"2\" },\r\n  { value: 3, label: \"3\" },\r\n  { value: 4, label: \"4\" },\r\n  { value: 5, label: \"5\" },\r\n  { value: 6, label: \"6\" },\r\n  { value: 7, label: \"7\" },\r\n]\r\n\r\n// this variable will be used to store the array of episodes that correspond to the selected season number\r\nlet episodeOptions = undefined;\r\n\r\n\r\nconst InputReferences = () => {\r\n  const [seasonNum, setSeasonNum] = useState(1);\r\n  const [episodeNum, setEpisodeNum] = useState(1);\r\n  const [subject, setSubject] = useState('');\r\n  const [timestamp, setTimestamp] = useState({ minutes: 0, seconds: 0 });\r\n  const { minutes, seconds } = timestamp;\r\n  const [quote, setQuote] = useState('');\r\n  const [speaker, setSpeaker] = useState('');\r\n  const [speakerContext, setSpeakerContext] = useState('');\r\n  const [meaning, setMeaning] = useState('');\r\n  const [submit, setSubmit] = useState(false);\r\n\r\n  const findEpisodes = (season) => {\r\n    // store the formatted episodes in the episodeOptions dropdown menu\r\n    episodeOptions = axiosRequest(season);\r\n    console.log(\"Did this work?\", episodeOptions);\r\n  }\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    // put the rest of the values on the form into an object that will be pushed to the episode array\r\n      // that object will be pushed to the episodes array\r\n    const reference = {\r\n      // id: 1, --> Array.length ; added in backend\r\n      subject: subject,\r\n      timestamp: `${minutes}:${seconds < 10 ? \"0\" + seconds: seconds}`,\r\n      quote: quote,\r\n      speaker: speaker,\r\n      context: speakerContext,\r\n      meaning: meaning,\r\n      // screenshot: \"https://some-picture-hosting-website.com/image\"\r\n    }\r\n    console.log(reference);\r\n    \r\n    // use the season number and episode number so that they can be used to check for the specific season and episode\r\n    axios({\r\n      method: 'POST',\r\n      url: 'https://project-gg.herokuapp.com/seasons/add',\r\n      data: {\r\n        \"seasonNumber\": seasonNum.value,\r\n        \"episodeNumber\": episodeNum.value,\r\n        \"references\": reference\r\n    }\r\n    }).then((res) => {\r\n      console.log('maloned', res);\r\n    }, (err) => console.log(err));\r\n\r\n    // set back to default values\r\n    setSeasonNum(1);\r\n    setEpisodeNum(1);\r\n    setSubject('');\r\n    setTimestamp({ minutes: 0, seconds: 0 });\r\n    setQuote('');\r\n    setSpeaker('');\r\n    setSpeakerContext('');\r\n    setMeaning('');\r\n    setSubmit('');\r\n\r\n    // TODO better UI; only inform the user that the reference was submitted if the post request was successful\r\n    alert(\"Reference Submitted!\");\r\n  }\r\n\r\n  return (\r\n    <section className=\"referencesForm\">\r\n      <h2>Add Your Reference!</h2>\r\n      <form action=\"submit\" onSubmit={handleSubmit}>\r\n        <label htmlFor=\"seasonNum\">Season Number</label>\r\n        {/* NOTE even though the Selects are required, they both have an initial value of one, and the form submits even when nothing is chosen. */}\r\n        <Select\r\n          id=\"seasonNum\"\r\n          name=\"seasonNum\"\r\n          className=\"seasonSelect\"\r\n          value={seasonNum}\r\n          options={seasonOptions}\r\n          onChange={(seasonNum) => {\r\n            setSeasonNum(seasonNum);\r\n            findEpisodes(seasonNum.value);\r\n          }}\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"episodeNum\">Episode Number</label>\r\n        <Select\r\n          id=\"episodeNum\"\r\n          name=\"episodeNum\"\r\n          className=\"seasonSelect\"\r\n          value={episodeNum}\r\n          options={episodeOptions}\r\n          onChange={(episodeNum) => {\r\n            setEpisodeNum(episodeNum);\r\n            findEpisodes(episodeNum.value); // TODO check to see if this is needed once the 503 error is gone\r\n          }}\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"subject\">Subject</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"subject\"\r\n          name=\"subject\"\r\n          value={subject}\r\n          onChange={(e) => setSubject(e.target.value)}\r\n          required\r\n        />\r\n\r\n        <fieldset>\r\n          <legend>Time Stamp</legend>\r\n          <div className=\"minutes\">\r\n            <label htmlFor=\"minutes\">Minutes</label>\r\n            <input \r\n              type=\"number\"\r\n              id=\"minutes\"\r\n              name=\"minutes\"\r\n              value={minutes}\r\n              onChange={(e) => setTimestamp({...timestamp, minutes: e.target.value })}\r\n              min=\"0\"\r\n              max=\"60\"\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"seconds\">\r\n            <label htmlFor=\"seconds\">Seconds</label>\r\n            <input\r\n              type=\"number\"\r\n              id=\"seconds\"\r\n              name=\"seconds\"\r\n              value={seconds}\r\n              onChange={(e) => setTimestamp({ ...timestamp, seconds: e.target.value})}\r\n              min=\"0\"\r\n              max=\"59\"\r\n              required\r\n            />\r\n          </div>\r\n        </fieldset>\r\n\r\n        <label htmlFor=\"quote\">Quote</label>\r\n        <textarea\r\n          id=\"quote\"\r\n          name=\"quote\"\r\n          value={quote}\r\n          onChange={(e) => setQuote(e.target.value)}\r\n          required\r\n          ></textarea>\r\n\r\n        <label htmlFor=\"speaker\">Speaker</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"speaker\"\r\n          name=\"speaker\"\r\n          value={speaker}\r\n          onChange={(e) => setSpeaker(e.target.value)}\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"speakerContext\">Context</label>\r\n        <textarea\r\n          id=\"speakerContext\"\r\n          name=\"speakerContext\"\r\n          value={speakerContext}\r\n          onChange={(e) => setSpeakerContext(e.target.value)}\r\n          required\r\n        ></textarea>\r\n\r\n        <label htmlFor=\"meaning\">Meaning</label>\r\n        <textarea\r\n          id=\"meaning\"\r\n          name=\"meaning\"\r\n          value={meaning}\r\n          onChange={(e) => setMeaning(e.target.value)}\r\n          required\r\n        ></textarea>\r\n\r\n        {/* STRETCH */}\r\n        <button>Add Another Reference</button>\r\n        {/* REVIEW the form will still submit even if the Selects are empty; disable submit button until form is complete instead? */}\r\n        <input type=\"submit\" value=\"Submit\" />\r\n      </form>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default InputReferences;","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\EpisodeRequest.js",["39"],"C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\episodeRequest.js",["40"],"import axios from 'axios';\r\n\r\nconst axiosRequest = (seasonNum) => {\r\n  // formatted array that has returned values from map, and then gets returned itself\r\n  const readyToExport = [];\r\n  // https://project-gg.herokuapp.com/seasons/${seasonNum}\r\n  axios({\r\n    method: 'GET',\r\n    url: `https://project-gg.herokuapp.com/seasons/${seasonNum}`,\r\n    responseType: \"json\"\r\n    // data: {\r\n    //   episodeNumber: episodeNum,\r\n    //   episodeName: name\r\n    // },\r\n    // params: {\r\n    //   seasonNumber: seasonNum.value,\r\n    // }\r\n  }).then((res) => {\r\n    const episodesArr =res.data[0].episodes;\r\n    \r\n\r\n    episodesArr.map(episode => {\r\n      const formattedEpisode = {\r\n        value: episode.episodeNumber,\r\n        label: `${episode.episodeNumber} - ${episode.name}`\r\n      }\r\n      readyToExport.push(formattedEpisode);\r\n    });\r\n  }).catch((err) => console.log(err));\r\n  \r\n  return readyToExport;\r\n}\r\n\r\nexport default axiosRequest;","C:\\Users\\Greg\\Desktop\\Juno\\bootcamp\\projects\\fullstack\\project-gg\\src\\components\\Navbar.js",["41"],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":2,"column":42,"nodeType":"48","messageId":"49","endLine":2,"endColumn":46},{"ruleId":"46","severity":1,"message":"50","line":6,"column":8,"nodeType":"48","messageId":"49","endLine":6,"endColumn":13},{"ruleId":"46","severity":1,"message":"51","line":31,"column":10,"nodeType":"48","messageId":"49","endLine":31,"endColumn":16},{"ruleId":"52","severity":1,"message":"53","line":23,"column":29,"nodeType":"54","messageId":"55","endLine":23,"endColumn":31},{"ruleId":"52","severity":1,"message":"53","line":22,"column":29,"nodeType":"54","messageId":"55","endLine":22,"endColumn":31},{"ruleId":"46","severity":1,"message":"56","line":7,"column":10,"nodeType":"48","messageId":"49","endLine":7,"endColumn":20},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'axios' is defined but never used.","'submit' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'showSeason' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]