[{"C:\\Users\\ulano\\Desktop\\sites\\gg-api\\project-gg\\src\\index.js":"1","C:\\Users\\ulano\\Desktop\\sites\\gg-api\\project-gg\\src\\reportWebVitals.js":"2","C:\\Users\\ulano\\Desktop\\sites\\gg-api\\project-gg\\src\\App.js":"3","C:\\Users\\ulano\\Desktop\\sites\\gg-api\\project-gg\\src\\components\\Navbar.js":"4","C:\\Users\\ulano\\Desktop\\sites\\gg-api\\project-gg\\src\\components\\InputReferences.js":"5","C:\\Users\\ulano\\Desktop\\sites\\gg-api\\project-gg\\src\\components\\SeasonDisplay.js":"6","C:\\Users\\ulano\\Desktop\\sites\\gg-api\\project-gg\\src\\components\\NewReferencesDisplay.js":"7","C:\\Users\\ulano\\Desktop\\sites\\gg-api\\project-gg\\src\\components\\LoginButton.js":"8","C:\\Users\\ulano\\Desktop\\sites\\gg-api\\project-gg\\src\\components\\LogoutButton.js":"9","C:\\Users\\ulano\\Desktop\\sites\\gg-api\\project-gg\\src\\components\\episodeReq.js":"10","C:\\Users\\ulano\\Desktop\\sites\\gg-api\\project-gg\\src\\components\\referencePost.js":"11","C:\\Users\\ulano\\Desktop\\sites\\gg-api\\project-gg\\src\\components\\Episode.js":"12","C:\\Users\\ulano\\Desktop\\sites\\gg-api\\project-gg\\src\\components\\Season.js":"13","C:\\Users\\ulano\\Desktop\\sites\\gg-api\\project-gg\\src\\components\\sortFunctions.js":"14"},{"size":523,"mtime":1609366703565,"results":"15","hashOfConfig":"16"},{"size":375,"mtime":1609362156993,"results":"17","hashOfConfig":"16"},{"size":1446,"mtime":1609881653762,"results":"18","hashOfConfig":"16"},{"size":2541,"mtime":1609887928355,"results":"19","hashOfConfig":"16"},{"size":7295,"mtime":1609711348120,"results":"20","hashOfConfig":"16"},{"size":2621,"mtime":1609711348129,"results":"21","hashOfConfig":"16"},{"size":4567,"mtime":1609917279899,"results":"22","hashOfConfig":"16"},{"size":227,"mtime":1609629247211,"results":"23","hashOfConfig":"16"},{"size":210,"mtime":1609629247212,"results":"24","hashOfConfig":"16"},{"size":774,"mtime":1609711348131,"results":"25","hashOfConfig":"16"},{"size":662,"mtime":1609635150842,"results":"26","hashOfConfig":"16"},{"size":3758,"mtime":1609887064414,"results":"27","hashOfConfig":"16"},{"size":929,"mtime":1609711348129,"results":"28","hashOfConfig":"16"},{"size":551,"mtime":1609917337084,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"10gqg4j",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"32"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\ulano\\Desktop\\sites\\gg-api\\project-gg\\src\\index.js",[],["66","67"],"C:\\Users\\ulano\\Desktop\\sites\\gg-api\\project-gg\\src\\reportWebVitals.js",[],"C:\\Users\\ulano\\Desktop\\sites\\gg-api\\project-gg\\src\\App.js",["68"],"import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport { Auth0Provider } from \"@auth0/auth0-react\";\r\nimport \"./sass/App.scss\";\r\nimport InputReferences from \"./components/InputReferences.js\";\r\nimport Navbar from \"./components/Navbar.js\";\r\nimport SeasonDisplay from \"./components/SeasonDisplay\";\r\nimport NewReferencesDisplay from \"./components/NewReferencesDisplay\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <Auth0Provider\r\n      domain=\"codedkhan.us.auth0.com\"\r\n      clientId=\"1fAqEsZEmLK7Lfrh0PP01H8YbIPCs1q0\"\r\n      redirectUri={window.location.origin}\r\n    >\r\n      <Router basename={process.env.PUBLIC_URL}>\r\n        <div className=\"App\">\r\n          <header>\r\n              <Route path=\"/\" component={Navbar} />\r\n              {/* REVIEW title should reflect the purpose of our app (copyright!) */}\r\n            <div className=\"wrapper\">\r\n              <h1>Gilmore girls API</h1>\r\n              <img src=\"../coffee.png\" alt=\"Coffee Cup\" />\r\n            </div>\r\n          </header>\r\n          <main>\r\n            <Route path=\"/season/:seasonNum\" component={SeasonDisplay} />\r\n            <Route path=\"/input\" component={InputReferences} />\r\n            <Route path=\"/approve\" component={NewReferencesDisplay} />\r\n          </main>\r\n          <footer>Created by Asif, Boris, Caitlin, and Greg</footer>\r\n        </div>\r\n      </Router>\r\n    </Auth0Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","C:\\Users\\ulano\\Desktop\\sites\\gg-api\\project-gg\\src\\components\\Navbar.js",["69","70","71"],"import Fragment, { useRef } from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport { useAuth0 } from '@auth0/auth0-react';\r\nimport LoginButton from './LoginButton.js';\r\nimport LogoutButton from './LogoutButton.js'\r\n\r\nconst Navbar = () => {\r\n  const { user, isAuthenticated } = useAuth0();\r\n  const checkBox = document.getElementById('dropDownMenu');\r\n  const changeCheckedToFalse = (checkBoxTarget) => {\r\n    checkBoxTarget.checked = false;\r\n    return checkBoxTarget;\r\n  };\r\n  return (\r\n    <div>\r\n      {/* drop down menu that will occur at media query 1135px */}\r\n      <input type=\"checkbox\" name=\"dropDownMenu\" id=\"dropDownMenu\" />\r\n      <div className=\"menuToggle\">\r\n        <label htmlFor=\"dropDownMenu\" aria-label=\"Menu\">\r\n          {/* hamburger menu */}\r\n          <span></span>\r\n          <span></span>\r\n          <span></span>\r\n        </label>\r\n      </div>\r\n      <nav>\r\n        <ul className=\"wrapper\">\r\n          <div className=\"seasons\">\r\n            <li>\r\n              <Link to=\"/season/1\" onClick={() => changeCheckedToFalse(checkBox)}>Season 1</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/season/2\" onClick={() => changeCheckedToFalse(checkBox)}>Season 2</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/season/3\" onClick={() => changeCheckedToFalse(checkBox)}>Season 3</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/season/4\" onClick={() => changeCheckedToFalse(checkBox)}>Season 4</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/season/5\" onClick={() => changeCheckedToFalse(checkBox)}>Season 5</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/season/6\" onClick={() => changeCheckedToFalse(checkBox)}>Season 6</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/season/7\" onClick={() => changeCheckedToFalse(checkBox)}>Season 7</Link>\r\n            </li>\r\n          </div>\r\n          <div className=\"navLinks\">\r\n            <li>\r\n              <Link to=\"/approve\" onClick={() => changeCheckedToFalse(checkBox)}>Approve Ref</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/input\" onClick={() => changeCheckedToFalse(checkBox)}>New Reference</Link>\r\n            </li>\r\n            <li>\r\n              {isAuthenticated ? <LogoutButton onClick={() => changeCheckedToFalse(checkBox)}/> : <LoginButton onClick={() => changeCheckedToFalse(checkBox)}/>}\r\n            </li>\r\n          </div>\r\n        </ul>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;","C:\\Users\\ulano\\Desktop\\sites\\gg-api\\project-gg\\src\\components\\InputReferences.js",["72"],"import { useState } from 'react';\r\nimport axios from 'axios';\r\nimport Select from 'react-select';\r\nimport axiosRequest from \"./episodeReq.js\";\r\n// available seasons for the season number dropdown\r\nconst seasonOptions = [\r\n  { value: 1, label: \"1\" },\r\n  { value: 2, label: \"2\" },\r\n  { value: 3, label: \"3\" },\r\n  { value: 4, label: \"4\" },\r\n  { value: 5, label: \"5\" },\r\n  { value: 6, label: \"6\" },\r\n  { value: 7, label: \"7\" },\r\n]\r\n\r\n// this variable will be used to store the array of episodes that correspond to the selected season number\r\nlet episodeOptions = undefined;\r\n\r\n\r\nconst InputReferences = () => {\r\n  const [seasonNum, setSeasonNum] = useState(1);\r\n  const [episodeNum, setEpisodeNum] = useState(1);\r\n  const [subject, setSubject] = useState('');\r\n  const [timestamp, setTimestamp] = useState({ minutes: 0, seconds: 0 });\r\n  const { minutes, seconds } = timestamp;\r\n  const [quote, setQuote] = useState('');\r\n  const [speaker, setSpeaker] = useState('');\r\n  const [speakerContext, setSpeakerContext] = useState('');\r\n  const [meaning, setMeaning] = useState('');\r\n  const [submit, setSubmit] = useState(false);\r\n\r\n  const findEpisodes = (season) => {\r\n    // store the formatted episodes in the episodeOptions dropdown menu\r\n    episodeOptions = axiosRequest(season);\r\n    console.log(\"Did this work?\", episodeOptions);\r\n  }\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    // put the rest of the values on the form into an object that will be pushed to the episode array\r\n      // that object will be pushed to the episodes array\r\n    const reference = {\r\n      // id: 1, --> Array.length ; added in backend\r\n      subject: subject,\r\n      timestamp: `${minutes}:${seconds < 10 ? \"0\" + seconds: seconds}`,\r\n      quote: quote,\r\n      speaker: speaker,\r\n      context: speakerContext,\r\n      meaning: meaning,\r\n      // screenshot: \"https://some-picture-hosting-website.com/image\"\r\n    }\r\n    console.log(reference);\r\n    \r\n    // use the season number and episode number so that they can be used to check for the specific season and episode\r\n    axios({\r\n      method: 'POST',\r\n      url: 'https://cors-anywhere.herokuapp.com/https://project-gg.herokuapp.com/seasons/add',\r\n      data: {\r\n        \"seasonNumber\": seasonNum.value,\r\n        \"episodeNumber\": episodeNum.value,\r\n        \"references\": reference\r\n    }\r\n    }).then((res) => {\r\n      console.log('maloned', res);\r\n      alert(\"Reference added to approval list. Thank you!\");\r\n    }).catch( (err) => {\r\n      console.log(err);\r\n      alert(`Sorry, reference submit failed: ${err}`);\r\n    });\r\n\r\n    // set back to default values\r\n    setSeasonNum(1);\r\n    setEpisodeNum(1);\r\n    setSubject('');\r\n    setTimestamp({ minutes: 0, seconds: 0 });\r\n    setQuote('');\r\n    setSpeaker('');\r\n    setSpeakerContext('');\r\n    setMeaning('');\r\n    setSubmit('');\r\n\r\n    // TODO better UI; only inform the user that the reference was submitted if the post request was successful\r\n    alert(\"Reference Submitted!\");\r\n  }\r\n\r\n  return (\r\n    <section >\r\n      <h2>Add Your Reference!</h2>\r\n      <form action=\"submit\" className=\"referencesForm\" onSubmit={handleSubmit}>\r\n        <label htmlFor=\"seasonNum\">Season Number</label>\r\n        {/* NOTE even though the Selects are required, they both have an initial value of one, and the form submits even when nothing is chosen. */}\r\n        <Select\r\n          id=\"seasonNum\"\r\n          name=\"seasonNum\"\r\n          className=\"seasonSelect\"\r\n          value={seasonNum}\r\n          options={seasonOptions}\r\n          onChange={(seasonNum) => {\r\n            setSeasonNum(seasonNum);\r\n            findEpisodes(seasonNum.value);\r\n          }}\r\n          theme={theme => ({\r\n            ...theme,\r\n            borderRadius: 5,\r\n            colors: {\r\n              ...theme.colors,\r\n              primary25: '#dff3e3',\r\n              primary: '#142c53',\r\n            }\r\n          })}\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"episodeNum\">Episode Number</label>\r\n        <Select\r\n          id=\"episodeNum\"\r\n          name=\"episodeNum\"\r\n          className=\"seasonSelect\"\r\n          value={episodeNum}\r\n          options={episodeOptions}\r\n          onChange={(episodeNum) => {\r\n            setEpisodeNum(episodeNum);\r\n            findEpisodes(episodeNum.value); // TODO check to see if this is needed once the 503 error is gone\r\n          }}\r\n          theme={theme => ({\r\n            ...theme,\r\n            borderRadius: 5,\r\n            colors: {\r\n              ...theme.colors,\r\n              primary25: '#dff3e3',\r\n              primary: '#142c53',\r\n            }\r\n          })}\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"subject\">Subject</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"subject\"\r\n          name=\"subject\"\r\n          value={subject}\r\n          onChange={(e) => setSubject(e.target.value)}\r\n          required\r\n        />\r\n\r\n        <fieldset>\r\n          {/* TODO use regex to check numbers */}\r\n          <legend>Time Stamp</legend>\r\n          <div className=\"minutes\">\r\n            <label htmlFor=\"minutes\">Minutes</label>\r\n            <input \r\n              type=\"number\"\r\n              id=\"minutes\"\r\n              name=\"minutes\"\r\n              value={minutes}\r\n              onChange={(e) => setTimestamp({...timestamp, minutes: e.target.value })}\r\n              min=\"0\"\r\n              max=\"60\"\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"seconds\">\r\n            <label htmlFor=\"seconds\">Seconds</label>\r\n            <input\r\n              type=\"number\"\r\n              id=\"seconds\"\r\n              name=\"seconds\"\r\n              value={seconds}\r\n              onChange={(e) => setTimestamp({ ...timestamp, seconds: e.target.value})}\r\n              min=\"0\"\r\n              max=\"59\"\r\n              required\r\n            />\r\n          </div>\r\n        </fieldset>\r\n\r\n        <label htmlFor=\"quote\">Quote</label>\r\n        <textarea\r\n          id=\"quote\"\r\n          name=\"quote\"\r\n          value={quote}\r\n          onChange={(e) => setQuote(e.target.value)}\r\n          required\r\n          ></textarea>\r\n\r\n        <label htmlFor=\"speaker\">Speaker</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"speaker\"\r\n          name=\"speaker\"\r\n          value={speaker}\r\n          onChange={(e) => setSpeaker(e.target.value)}\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"speakerContext\">Context</label>\r\n        <textarea\r\n          id=\"speakerContext\"\r\n          name=\"speakerContext\"\r\n          value={speakerContext}\r\n          onChange={(e) => setSpeakerContext(e.target.value)}\r\n          required\r\n        ></textarea>\r\n\r\n        <label htmlFor=\"meaning\">Meaning</label>\r\n        <textarea\r\n          id=\"meaning\"\r\n          name=\"meaning\"\r\n          value={meaning}\r\n          onChange={(e) => setMeaning(e.target.value)}\r\n          required\r\n        ></textarea>\r\n\r\n        <div className=\"buttons\">\r\n          {/* STRETCH */}\r\n          <button>Add Another Reference</button>\r\n          {/* REVIEW the form will still submit even if the Selects are empty; disable submit button until form is complete instead? */}\r\n          <input type=\"submit\" value=\"Submit\" />\r\n        </div>\r\n      </form>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default InputReferences;","C:\\Users\\ulano\\Desktop\\sites\\gg-api\\project-gg\\src\\components\\SeasonDisplay.js",["73","74"],"import { useState, useEffect, } from 'react';\r\nimport { Route, Link, useParams, Switch, useRouteMatch } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Episode from './Episode.js';\r\nimport Season from './Season.js';\r\n\r\nconst SeasonDisplay = () => {\r\n  const { seasonNum } = useParams();\r\n  const { url } = useRouteMatch();\r\n  const [episodeObj, setEpisodeObj] = useState({});\r\n  const [episodeNum, setEpisodeNum] = useState(1);\r\n\r\n  // useEffect(() => {\r\n  //   if (!episodeObj[seasonNum]) {\r\n  //     getEpisode();\r\n  //   } else if (!episodeObj[seasonNum][episodeNum]) {\r\n  //     getEpisode();\r\n  //   }\r\n  // }, [episodeNum])\r\n\r\n  const getEpisodeAxios = async () => {\r\n    return await axios.get(`https://project-gg.herokuapp.com/seasons/${seasonNum}/episodes/${episodeNum}`)\r\n      .then(res => {\r\n        const newEpisodeObj = episodeObj;\r\n        newEpisodeObj[seasonNum] = { [episodeNum]: res.data[0] };\r\n        setEpisodeObj(newEpisodeObj);\r\n        console.log(res);\r\n        return res.data[0];\r\n      })\r\n      .catch(err => console.log('Err: ', err));\r\n  }\r\n\r\n  const [seasonsObj, setSeasonsObj] = useState({});\r\n  const [showSeason, setShowSeason] = useState(seasonNum);\r\n  if (showSeason !== seasonNum) setShowSeason(seasonNum); // this is to prevent rerenders\r\n\r\n  useEffect(() => {\r\n    if (typeof seasonsObj[showSeason] === 'undefined') {\r\n      axios({\r\n        method: 'GET',\r\n        url: `https://project-gg.herokuapp.com/seasons/${showSeason}`\r\n      }).then(res => {\r\n        // console.log('gotted');\r\n        setSeasonsObj({...seasonsObj, [showSeason]: [res.data[0]] })\r\n      }).catch(err => console.log(err));\r\n    }\r\n  }, [showSeason]);\r\n\r\n  const changeEpisodeNum = (num) => {\r\n    setEpisodeNum(num);\r\n    return num;\r\n  }\r\n\r\n  const getEpisode = async () => {\r\n    console.log(episodeNum);\r\n    if (!episodeObj[seasonNum]) {\r\n      const result = await getEpisodeAxios();\r\n      console.log({result});\r\n      return result;\r\n    } else if (!episodeObj[seasonNum][episodeNum]) {\r\n      const result = await getEpisodeAxios();\r\n      console.log({result});\r\n      return result;\r\n    }\r\n    return episodeObj[seasonNum][episodeNum];\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Season {seasonNum}</h2>\r\n      <Switch>\r\n        <Route exact path={`${url}`} render={() => (\r\n          <Season season={seasonsObj[showSeason]} />\r\n        )} />\r\n        <Route path={`${url}/episode/:episodeNum`} render={() => (\r\n          <Episode getEpisode={getEpisode} changeEpisodeNum={changeEpisodeNum} />\r\n        )} />\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SeasonDisplay;\r\n\r\n","C:\\Users\\ulano\\Desktop\\sites\\gg-api\\project-gg\\src\\components\\NewReferencesDisplay.js",["75","76","77"],"C:\\Users\\ulano\\Desktop\\sites\\gg-api\\project-gg\\src\\components\\LoginButton.js",[],"C:\\Users\\ulano\\Desktop\\sites\\gg-api\\project-gg\\src\\components\\LogoutButton.js",[],"C:\\Users\\ulano\\Desktop\\sites\\gg-api\\project-gg\\src\\components\\episodeReq.js",["78"],"import axios from 'axios';\r\n\r\nconst axiosRequest = (seasonNum) => {\r\n  // formatted array that has returned values from map, and then gets returned itself\r\n  const readyToExport = [];\r\n  // https://project-gg.herokuapp.com/seasons/${seasonNum}\r\n  axios({\r\n    method: 'GET',\r\n    url: `https://project-gg.herokuapp.com/seasons/${seasonNum}`,\r\n    responseType: \"json\"\r\n  }).then((res) => {\r\n    const episodesArr =res.data[0].episodes;\r\n\r\n    episodesArr.map(episode => {\r\n      const formattedEpisode = {\r\n        value: episode.episodeNumber,\r\n        label: `${episode.episodeNumber} - ${episode.name}`\r\n      }\r\n      readyToExport.push(formattedEpisode);\r\n    });\r\n  }).catch((err) => console.log(err));\r\n  \r\n  return readyToExport;\r\n}\r\n\r\nexport default axiosRequest;\r\n","C:\\Users\\ulano\\Desktop\\sites\\gg-api\\project-gg\\src\\components\\referencePost.js",[],"C:\\Users\\ulano\\Desktop\\sites\\gg-api\\project-gg\\src\\components\\Episode.js",["79","80","81","82","83"],"// import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { sortTimestamps } from './sortFunctions';\r\n// import axios from 'axios';\r\n\r\nconst Episode = (props) => { \r\n  console.log('tesat');\r\n  const { episodeNum } = useParams();\r\n  const [result, setResult] = useState(0);\r\n  const [episodeResult, setEpisodeResult] = useState(0);\r\n  const [image, setImage] = useState([]);\r\n  const [sortedEpisodes, setSortedEpisodes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    props.changeEpisodeNum(episodeNum);\r\n    setResult(5);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (result !== 0) {\r\n      props.getEpisode().then((res) => {\r\n        console.log(res);\r\n        setEpisodeResult(res)\r\n      });\r\n    }\r\n  }, [result]);\r\n  \r\n  // url: `https://api.themoviedb.org/3/tv/4586/season/${episodeResult.seasonNumber}/episode/${episodeNum}?api_key=cd7b67374269e15777a55aee45332dab`\r\n  // https://api.themoviedb.org/3/tv/4586/season/1/episode/4?api_key=cd7b67374269e15777a55aee45332dab\r\n  useEffect(() => {\r\n    const seasonNum = episodeResult.seasonNumber; \r\n\r\n    if (episodeResult) {\r\n      console.log('running: ', seasonNum);\r\n      axios({\r\n        method: 'GET',\r\n        url: `https://api.themoviedb.org/3/tv/4586/season/${seasonNum}/episode/${episodeNum}?api_key=cd7b67374269e15777a55aee45332dab`\r\n      }).then(res => {\r\n        console.log('image gotted');\r\n        const newImage = 'https://image.tmdb.org/t/p/original' + res.data.still_path;\r\n        setImage(newImage);\r\n      }).catch(err => console.log('err: ', err));\r\n    }\r\n  }, [episodeResult])\r\n\r\n  useEffect(() => {\r\n    if (episodeResult !== 0) setSortedEpisodes(sortTimestamps(episodeResult.references));\r\n  }, [episodeResult])\r\n\r\n  return (\r\n    <section className=\"episodeInfo\">\r\n      {episodeResult && (\r\n        <div className=\"wrapper\">\r\n          <h3>{episodeResult.name}</h3>\r\n          <img src={image} alt=\"image of show\" />\r\n          {\r\n            episodeResult.references.length > 0 && (\r\n              <section className=\"references episodeContainer\">\r\n                {\r\n                  episodeResult.references.map(reference => {\r\n                    return (\r\n                      <article key={reference.id} className=\"episodeRef\">\r\n                        <div className=\"entryLine\">\r\n                          <h5>Subject:</h5>\r\n                          <p className=\"scroll\">{reference.subject}</p>\r\n                        </div>\r\n                        <div className=\"entryLine\">\r\n                          <h5>Time Stamp:</h5>\r\n                          <p>{reference.timestamp}</p>\r\n                        </div>\r\n                        <div className=\"entryLine\">\r\n                          <h5>Quote:</h5>\r\n                          <p className=\"scroll\">{reference.quote}</p>\r\n                        </div>\r\n                        <div className=\"entryLine\">\r\n                          <h5>Speaker:</h5>\r\n                          <p className=\"scroll\">{reference.speaker}</p>\r\n                        </div>\r\n                        <div className=\"entryLine\">\r\n                          <h5>Context:</h5>\r\n                          <p className=\"scroll\">{reference.context}</p>\r\n                        </div>\r\n                        <div className=\"entryLine\">\r\n                          <h5>Meaning:</h5>\r\n                          <p className=\"scroll\">{reference.meaning}</p>\r\n                        </div>\r\n                      </article>\r\n                    )\r\n                  })\r\n                }\r\n              </section>\r\n            )\r\n          }\r\n        </div>\r\n      )}\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Episode;","C:\\Users\\ulano\\Desktop\\sites\\gg-api\\project-gg\\src\\components\\Season.js",["84","85"],"import { Link } from 'react-router-dom';\r\n\r\nconst Season = ({ season }) => {\r\n  return (\r\n    <section className=\"seasonDisplay\">\r\n      <ul className=\"episodeList wrapper\">\r\n        {\r\n          typeof season !== 'undefined' && (\r\n            season[0].episodes.map((episode) => {\r\n              const { episodeNumber, name, overallNumber, references, seasonNumber } = episode;\r\n              return (\r\n                <li key={episodeNumber} className=\"episodeCard\">\r\n                  <div>\r\n                    <h3>{name}</h3>\r\n                    <h4> Episode {episodeNumber}</h4>\r\n                  </div>\r\n                  {/* STRETCH: Custom GIFs <p>Image Goes Here</p> */}\r\n                  <Link to={`/season/${seasonNumber}/episode/${episodeNumber}`} >See References</Link>\r\n                </li>\r\n              )\r\n            })\r\n          )\r\n        }\r\n      </ul>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Season;","C:\\Users\\ulano\\Desktop\\sites\\gg-api\\project-gg\\src\\components\\sortFunctions.js",[],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":2,"column":42,"nodeType":"92","messageId":"93","endLine":2,"endColumn":46},{"ruleId":"90","severity":1,"message":"94","line":1,"column":8,"nodeType":"92","messageId":"93","endLine":1,"endColumn":16},{"ruleId":"90","severity":1,"message":"95","line":1,"column":20,"nodeType":"92","messageId":"93","endLine":1,"endColumn":26},{"ruleId":"90","severity":1,"message":"96","line":8,"column":11,"nodeType":"92","messageId":"93","endLine":8,"endColumn":15},{"ruleId":"90","severity":1,"message":"97","line":30,"column":10,"nodeType":"92","messageId":"93","endLine":30,"endColumn":16},{"ruleId":"90","severity":1,"message":"91","line":2,"column":17,"nodeType":"92","messageId":"93","endLine":2,"endColumn":21},{"ruleId":"98","severity":1,"message":"99","line":47,"column":6,"nodeType":"100","endLine":47,"endColumn":18,"suggestions":"101"},{"ruleId":"90","severity":1,"message":"102","line":5,"column":10,"nodeType":"92","messageId":"93","endLine":5,"endColumn":24},{"ruleId":"90","severity":1,"message":"103","line":13,"column":10,"nodeType":"92","messageId":"93","endLine":13,"endColumn":18},{"ruleId":"90","severity":1,"message":"104","line":13,"column":20,"nodeType":"92","messageId":"93","endLine":13,"endColumn":31},{"ruleId":"105","severity":1,"message":"106","line":14,"column":29,"nodeType":"107","messageId":"108","endLine":14,"endColumn":31},{"ruleId":"90","severity":1,"message":"109","line":14,"column":10,"nodeType":"92","messageId":"93","endLine":14,"endColumn":24},{"ruleId":"98","severity":1,"message":"110","line":19,"column":6,"nodeType":"100","endLine":19,"endColumn":8,"suggestions":"111"},{"ruleId":"98","severity":1,"message":"112","line":28,"column":6,"nodeType":"100","endLine":28,"endColumn":14,"suggestions":"113"},{"ruleId":"98","severity":1,"message":"114","line":46,"column":6,"nodeType":"100","endLine":46,"endColumn":21,"suggestions":"115"},{"ruleId":"116","severity":1,"message":"117","line":57,"column":11,"nodeType":"118","endLine":57,"endColumn":50},{"ruleId":"90","severity":1,"message":"119","line":10,"column":44,"nodeType":"92","messageId":"93","endLine":10,"endColumn":57},{"ruleId":"90","severity":1,"message":"120","line":10,"column":59,"nodeType":"92","messageId":"93","endLine":10,"endColumn":69},"no-native-reassign",["121"],"no-negated-in-lhs",["122"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'Fragment' is defined but never used.","'useRef' is defined but never used.","'user' is assigned a value but never used.","'submit' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'seasonsObj'. Either include it or remove the dependency array. You can also do a functional update 'setSeasonsObj(s => ...)' if you only need 'seasonsObj' in the 'setSeasonsObj' call.","ArrayExpression",["123"],"'sortTimestamps' is defined but never used.","'readMore' is assigned a value but never used.","'setReadMore' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'sortedEpisodes' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'episodeNum' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["124"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["125"],"React Hook useEffect has a missing dependency: 'episodeNum'. Either include it or remove the dependency array.",["126"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'overallNumber' is assigned a value but never used.","'references' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"127","fix":"128"},{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},"Update the dependencies array to be: [seasonsObj, showSeason]",{"range":"135","text":"136"},"Update the dependencies array to be: [episodeNum, props]",{"range":"137","text":"138"},"Update the dependencies array to be: [props, result]",{"range":"139","text":"140"},"Update the dependencies array to be: [episodeNum, episodeResult]",{"range":"141","text":"142"},[1666,1678],"[seasonsObj, showSeason]",[643,645],"[episodeNum, props]",[820,828],"[props, result]",[1650,1665],"[episodeNum, episodeResult]"]